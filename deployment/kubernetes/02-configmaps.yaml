---
apiVersion: v1
kind: ConfigMap
metadata:
  name: rental-ml-app-config
  namespace: rental-ml
  labels:
    app.kubernetes.io/name: rental-ml-system
    app.kubernetes.io/component: config
data:
  # Database configuration
  DB_HOST: "postgres-service"
  DB_PORT: "5432"
  DB_NAME: "rental_ml"
  DB_USERNAME: "postgres"
  DB_POOL_SIZE: "10"
  DB_MAX_OVERFLOW: "20"
  
  # Redis configuration
  REDIS_HOST: "redis-service"
  REDIS_PORT: "6379"
  REDIS_DB: "0"
  REDIS_MAX_CONNECTIONS: "20"
  
  # Celery configuration
  CELERY_BROKER_DB: "1"
  CELERY_RESULT_DB: "2"
  
  # Application configuration
  APP_ENV: "production"
  LOG_LEVEL: "INFO"
  API_HOST: "0.0.0.0"
  API_PORT: "8000"
  
  # ML configuration
  ML_MODEL_PATH: "/app/models"
  ML_BATCH_SIZE: "32"
  ML_CACHE_TTL: "3600"
  
  # Monitoring
  PROMETHEUS_ENABLED: "true"
  
  # Feature flags
  ENABLE_SCRAPING: "true"
  ENABLE_ML_TRAINING: "false"
  ENABLE_RECOMMENDATIONS: "true"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: rental-ml-nginx-config
  namespace: rental-ml
  labels:
    app.kubernetes.io/name: rental-ml-system
    app.kubernetes.io/component: nginx
data:
  nginx.conf: |
    user nginx;
    worker_processes auto;
    error_log /var/log/nginx/error.log warn;
    pid /var/run/nginx.pid;

    events {
        worker_connections 1024;
        use epoll;
        multi_accept on;
    }

    http {
        include /etc/nginx/mime.types;
        default_type application/octet-stream;

        log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                        '$status $body_bytes_sent "$http_referer" '
                        '"$http_user_agent" "$http_x_forwarded_for"';

        access_log /var/log/nginx/access.log main;

        sendfile on;
        tcp_nopush on;
        tcp_nodelay on;
        keepalive_timeout 65;
        types_hash_max_size 2048;
        server_tokens off;

        gzip on;
        gzip_vary on;
        gzip_proxied any;
        gzip_comp_level 6;
        gzip_types
            text/plain
            text/css
            text/xml
            text/javascript
            application/json
            application/javascript
            application/xml+rss
            application/atom+xml
            image/svg+xml;

        limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
        limit_req_zone $binary_remote_addr zone=login:10m rate=5r/m;

        upstream app_backend {
            server app-service:8000;
            keepalive 32;
        }

        include /etc/nginx/conf.d/*.conf;
    }
  
  default.conf: |
    server {
        listen 80;
        server_name _;
        
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
        
        location / {
            limit_req zone=api burst=20 nodelay;
            
            proxy_pass http://app_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            proxy_connect_timeout 30s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
            
            proxy_buffering on;
            proxy_buffer_size 4k;
            proxy_buffers 8 4k;
        }
        
        location /api/v1/scraping {
            limit_req zone=api burst=5 nodelay;
            
            proxy_pass http://app_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 300s;
        }
    }
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: rental-ml-redis-config
  namespace: rental-ml
  labels:
    app.kubernetes.io/name: rental-ml-system
    app.kubernetes.io/component: redis
data:
  redis.conf: |
    # Redis configuration for Rental ML System
    bind 0.0.0.0
    port 6379
    
    # Security
    protected-mode yes
    
    # Persistence
    appendonly yes
    appendfsync everysec
    
    # Memory management
    maxmemory-policy allkeys-lru
    
    # Logging
    loglevel notice
    
    # Performance
    tcp-keepalive 300
    timeout 0
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: rental-ml-prometheus-config
  namespace: rental-ml
  labels:
    app.kubernetes.io/name: rental-ml-system
    app.kubernetes.io/component: prometheus
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s
      evaluation_interval: 15s

    rule_files:
      # - "first_rules.yml"
      # - "second_rules.yml"

    scrape_configs:
      - job_name: 'prometheus'
        static_configs:
          - targets: ['localhost:9090']

      - job_name: 'rental-ml-app'
        static_configs:
          - targets: ['app-service:8000']
        metrics_path: '/metrics'
        scrape_interval: 30s

      - job_name: 'rental-ml-nginx'
        static_configs:
          - targets: ['nginx-service:80']
        metrics_path: '/nginx_status'
        scrape_interval: 30s

      - job_name: 'redis'
        static_configs:
          - targets: ['redis-service:6379']
        scrape_interval: 30s

      - job_name: 'postgres'
        static_configs:
          - targets: ['postgres-service:5432']
        scrape_interval: 30s