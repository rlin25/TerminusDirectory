---
apiVersion: v1
kind: Secret
metadata:
  name: rental-ml-database-secret
  namespace: rental-ml
  labels:
    app.kubernetes.io/name: rental-ml-system
    app.kubernetes.io/component: database
type: Opaque
data:
  # These are base64 encoded values - replace with actual secrets
  # To encode: echo -n "your-password" | base64
  postgres-password: cG9zdGdyZXNfcGFzc3dvcmQ=  # postgres_password
  postgres-db: cmVudGFsX21s  # rental_ml
  postgres-user: cG9zdGdyZXM=  # postgres
---
apiVersion: v1
kind: Secret
metadata:
  name: rental-ml-redis-secret
  namespace: rental-ml
  labels:
    app.kubernetes.io/name: rental-ml-system
    app.kubernetes.io/component: redis
type: Opaque
data:
  # Base64 encoded Redis password
  redis-password: cmVkaXNfcGFzc3dvcmQ=  # redis_password
---
apiVersion: v1
kind: Secret
metadata:
  name: rental-ml-app-secret
  namespace: rental-ml
  labels:
    app.kubernetes.io/name: rental-ml-system
    app.kubernetes.io/component: app
type: Opaque
data:
  # Base64 encoded application secrets
  secret-key: eW91ci1zdXBlci1zZWNyZXQta2V5LWhlcmU=  # your-super-secret-key-here
  jwt-secret-key: and0LXN1cGVyLXNlY3JldC1rZXktaGVyZQ==  # jwt-super-secret-key-here
  sentry-dsn: ""  # Add your Sentry DSN if using
---
apiVersion: v1
kind: Secret
metadata:
  name: rental-ml-celery-secret
  namespace: rental-ml
  labels:
    app.kubernetes.io/name: rental-ml-system
    app.kubernetes.io/component: celery
type: Opaque
stringData:
  celery-broker-url: "redis://:redis_password@redis-service:6379/1"
  celery-result-backend: "redis://:redis_password@redis-service:6379/2"
---
# TLS Secret for HTTPS (if using custom certificates)
apiVersion: v1
kind: Secret
metadata:
  name: rental-ml-tls-secret
  namespace: rental-ml
  labels:
    app.kubernetes.io/name: rental-ml-system
    app.kubernetes.io/component: ingress
type: kubernetes.io/tls
data:
  # Replace with your actual TLS certificate and key (base64 encoded)
  tls.crt: LS0tLS1CRUdJTi...  # Your certificate
  tls.key: LS0tLS1CRUdJTi...  # Your private key