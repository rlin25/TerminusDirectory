---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: rental-ml
  labels:
    app.kubernetes.io/name: rental-ml-system
    app.kubernetes.io/component: database
    app.kubernetes.io/instance: postgres
    app.kubernetes.io/version: "15"
spec:
  replicas: 1
  strategy:
    type: Recreate  # Important for stateful applications
  selector:
    matchLabels:
      app.kubernetes.io/name: rental-ml-system
      app.kubernetes.io/component: database
      app.kubernetes.io/instance: postgres
  template:
    metadata:
      labels:
        app.kubernetes.io/name: rental-ml-system
        app.kubernetes.io/component: database
        app.kubernetes.io/instance: postgres
        app.kubernetes.io/version: "15"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9187"
        prometheus.io/path: "/metrics"
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 999
        runAsGroup: 999
        fsGroup: 999
      containers:
      - name: postgres
        image: postgres:15-alpine
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 5432
          name: postgres
          protocol: TCP
        env:
        - name: POSTGRES_DB
          valueFrom:
            secretKeyRef:
              name: rental-ml-database-secret
              key: postgres-db
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: rental-ml-database-secret
              key: postgres-user
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: rental-ml-database-secret
              key: postgres-password
        - name: POSTGRES_INITDB_ARGS
          value: "--encoding=UTF8 --locale=C"
        - name: PGDATA
          value: "/var/lib/postgresql/data/pgdata"
        volumeMounts:
        - name: postgres-data
          mountPath: /var/lib/postgresql/data
        - name: postgres-init-scripts
          mountPath: /docker-entrypoint-initdb.d
          readOnly: true
        - name: tmp
          mountPath: /tmp
        - name: run
          mountPath: /var/run/postgresql
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        livenessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 5
        readinessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
          capabilities:
            drop:
            - ALL
      volumes:
      - name: postgres-data
        persistentVolumeClaim:
          claimName: postgres-data-pvc
      - name: postgres-init-scripts
        configMap:
          name: postgres-init-scripts
          defaultMode: 0755
      - name: tmp
        emptyDir: {}
      - name: run
        emptyDir: {}
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-init-scripts
  namespace: rental-ml
  labels:
    app.kubernetes.io/name: rental-ml-system
    app.kubernetes.io/component: database
data:
  init-db.sql: |
    -- Rental ML System Database Initialization
    -- This script sets up the initial database structure
    
    -- Enable required extensions
    CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
    CREATE EXTENSION IF NOT EXISTS "pg_trgm";
    CREATE EXTENSION IF NOT EXISTS "btree_gin";
    
    -- Create schemas
    CREATE SCHEMA IF NOT EXISTS rental_ml;
    CREATE SCHEMA IF NOT EXISTS analytics;
    CREATE SCHEMA IF NOT EXISTS ml_models;
    
    -- Set default schema
    SET search_path TO rental_ml, public;
    
    -- Grant permissions
    GRANT ALL PRIVILEGES ON SCHEMA rental_ml TO postgres;
    GRANT ALL PRIVILEGES ON SCHEMA analytics TO postgres;
    GRANT ALL PRIVILEGES ON SCHEMA ml_models TO postgres;
    
    -- Create basic tables (will be managed by application migrations)
    -- Users table
    CREATE TABLE IF NOT EXISTS users (
        id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
        email VARCHAR(255) UNIQUE NOT NULL,
        created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
        updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
    );
    
    -- Properties table
    CREATE TABLE IF NOT EXISTS properties (
        id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
        title TEXT NOT NULL,
        description TEXT,
        price DECIMAL(10,2),
        location JSONB,
        features JSONB,
        created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
        updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
    );
    
    -- User interactions table
    CREATE TABLE IF NOT EXISTS user_interactions (
        id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
        user_id UUID REFERENCES users(id),
        property_id UUID REFERENCES properties(id),
        interaction_type VARCHAR(50) NOT NULL,
        interaction_data JSONB,
        created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
    );
    
    -- Create indexes for performance
    CREATE INDEX IF NOT EXISTS idx_properties_location ON properties USING GIN (location);
    CREATE INDEX IF NOT EXISTS idx_properties_features ON properties USING GIN (features);
    CREATE INDEX IF NOT EXISTS idx_user_interactions_user_id ON user_interactions(user_id);
    CREATE INDEX IF NOT EXISTS idx_user_interactions_property_id ON user_interactions(property_id);
    CREATE INDEX IF NOT EXISTS idx_user_interactions_type ON user_interactions(interaction_type);
    
    -- Create triggers for updated_at
    CREATE OR REPLACE FUNCTION update_updated_at_column()
    RETURNS TRIGGER AS $$
    BEGIN
        NEW.updated_at = NOW();
        RETURN NEW;
    END;
    $$ language 'plpgsql';
    
    CREATE TRIGGER update_users_updated_at BEFORE UPDATE ON users
        FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
    
    CREATE TRIGGER update_properties_updated_at BEFORE UPDATE ON properties
        FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();