---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: app
  namespace: rental-ml
  labels:
    app.kubernetes.io/name: rental-ml-system
    app.kubernetes.io/component: app
    app.kubernetes.io/instance: app
    app.kubernetes.io/version: "1.0.0"
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 25%
  selector:
    matchLabels:
      app.kubernetes.io/name: rental-ml-system
      app.kubernetes.io/component: app
      app.kubernetes.io/instance: app
  template:
    metadata:
      labels:
        app.kubernetes.io/name: rental-ml-system
        app.kubernetes.io/component: app
        app.kubernetes.io/instance: app
        app.kubernetes.io/version: "1.0.0"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8000"
        prometheus.io/path: "/metrics"
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      serviceAccountName: rental-ml-app
      containers:
      - name: app
        image: rental-ml-system:latest  # Replace with your actual image
        imagePullPolicy: IfNotPresent
        command: ["/docker-entrypoint.sh"]
        args: ["gunicorn", "src.application.api.main:app", "-w", "4", "-k", "uvicorn.workers.UvicornWorker", "--bind", "0.0.0.0:8000"]
        ports:
        - containerPort: 8000
          name: http
          protocol: TCP
        env:
        # Database configuration
        - name: DB_HOST
          valueFrom:
            configMapKeyRef:
              name: rental-ml-app-config
              key: DB_HOST
        - name: DB_PORT
          valueFrom:
            configMapKeyRef:
              name: rental-ml-app-config
              key: DB_PORT
        - name: DB_NAME
          valueFrom:
            configMapKeyRef:
              name: rental-ml-app-config
              key: DB_NAME
        - name: DB_USERNAME
          valueFrom:
            configMapKeyRef:
              name: rental-ml-app-config
              key: DB_USERNAME
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: rental-ml-database-secret
              key: postgres-password
        - name: DB_POOL_SIZE
          valueFrom:
            configMapKeyRef:
              name: rental-ml-app-config
              key: DB_POOL_SIZE
        - name: DB_MAX_OVERFLOW
          valueFrom:
            configMapKeyRef:
              name: rental-ml-app-config
              key: DB_MAX_OVERFLOW
        # Redis configuration
        - name: REDIS_HOST
          valueFrom:
            configMapKeyRef:
              name: rental-ml-app-config
              key: REDIS_HOST
        - name: REDIS_PORT
          valueFrom:
            configMapKeyRef:
              name: rental-ml-app-config
              key: REDIS_PORT
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: rental-ml-redis-secret
              key: redis-password
        - name: REDIS_DB
          valueFrom:
            configMapKeyRef:
              name: rental-ml-app-config
              key: REDIS_DB
        - name: REDIS_MAX_CONNECTIONS
          valueFrom:
            configMapKeyRef:
              name: rental-ml-app-config
              key: REDIS_MAX_CONNECTIONS
        # Application configuration
        - name: APP_ENV
          valueFrom:
            configMapKeyRef:
              name: rental-ml-app-config
              key: APP_ENV
        - name: LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              name: rental-ml-app-config
              key: LOG_LEVEL
        - name: API_HOST
          valueFrom:
            configMapKeyRef:
              name: rental-ml-app-config
              key: API_HOST
        - name: API_PORT
          valueFrom:
            configMapKeyRef:
              name: rental-ml-app-config
              key: API_PORT
        # ML configuration
        - name: ML_MODEL_PATH
          valueFrom:
            configMapKeyRef:
              name: rental-ml-app-config
              key: ML_MODEL_PATH
        - name: ML_BATCH_SIZE
          valueFrom:
            configMapKeyRef:
              name: rental-ml-app-config
              key: ML_BATCH_SIZE
        - name: ML_CACHE_TTL
          valueFrom:
            configMapKeyRef:
              name: rental-ml-app-config
              key: ML_CACHE_TTL
        # Security
        - name: SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: rental-ml-app-secret
              key: secret-key
        - name: JWT_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: rental-ml-app-secret
              key: jwt-secret-key
        # Monitoring
        - name: SENTRY_DSN
          valueFrom:
            secretKeyRef:
              name: rental-ml-app-secret
              key: sentry-dsn
              optional: true
        - name: PROMETHEUS_ENABLED
          valueFrom:
            configMapKeyRef:
              name: rental-ml-app-config
              key: PROMETHEUS_ENABLED
        # Feature flags
        - name: ENABLE_SCRAPING
          valueFrom:
            configMapKeyRef:
              name: rental-ml-app-config
              key: ENABLE_SCRAPING
        - name: ENABLE_ML_TRAINING
          valueFrom:
            configMapKeyRef:
              name: rental-ml-app-config
              key: ENABLE_ML_TRAINING
        - name: ENABLE_RECOMMENDATIONS
          valueFrom:
            configMapKeyRef:
              name: rental-ml-app-config
              key: ENABLE_RECOMMENDATIONS
        volumeMounts:
        - name: app-logs
          mountPath: /app/logs
        - name: ml-models
          mountPath: /app/models
        - name: app-data
          mountPath: /app/data
        - name: tmp
          mountPath: /tmp
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /health
            port: http
            scheme: HTTP
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 5
        readinessProbe:
          httpGet:
            path: /health
            port: http
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /health
            port: http
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 12
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
          capabilities:
            drop:
            - ALL
            add:
            - NET_BIND_SERVICE
      volumes:
      - name: app-logs
        persistentVolumeClaim:
          claimName: app-logs-pvc
      - name: ml-models
        persistentVolumeClaim:
          claimName: ml-models-pvc
      - name: app-data
        persistentVolumeClaim:
          claimName: app-data-pvc
      - name: tmp
        emptyDir: {}
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
      # Init container to wait for dependencies
      initContainers:
      - name: wait-for-postgres
        image: postgres:15-alpine
        command: ['sh', '-c', 'until pg_isready -h postgres-service -p 5432; do echo waiting for postgres; sleep 2; done;']
        env:
        - name: PGUSER
          valueFrom:
            secretKeyRef:
              name: rental-ml-database-secret
              key: postgres-user
      - name: wait-for-redis
        image: redis:7-alpine
        command: ['sh', '-c', 'until redis-cli -h redis-service -p 6379 ping; do echo waiting for redis; sleep 2; done;']