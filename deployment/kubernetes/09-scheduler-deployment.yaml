---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: scheduler
  namespace: rental-ml
  labels:
    app.kubernetes.io/name: rental-ml-system
    app.kubernetes.io/component: scheduler
    app.kubernetes.io/instance: scheduler
    app.kubernetes.io/version: "1.0.0"
spec:
  replicas: 1  # Only one scheduler should run
  strategy:
    type: Recreate  # Ensure only one instance at a time
  selector:
    matchLabels:
      app.kubernetes.io/name: rental-ml-system
      app.kubernetes.io/component: scheduler
      app.kubernetes.io/instance: scheduler
  template:
    metadata:
      labels:
        app.kubernetes.io/name: rental-ml-system
        app.kubernetes.io/component: scheduler
        app.kubernetes.io/instance: scheduler
        app.kubernetes.io/version: "1.0.0"
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      serviceAccountName: rental-ml-scheduler
      containers:
      - name: scheduler
        image: rental-ml-system:latest  # Replace with your actual image
        imagePullPolicy: IfNotPresent
        command: ["celery"]
        args: ["-A", "src.infrastructure.tasks.celery_app", "beat", "--loglevel=info", "--scheduler", "django_celery_beat.schedulers:DatabaseScheduler"]
        env:
        # Database configuration
        - name: DB_HOST
          valueFrom:
            configMapKeyRef:
              name: rental-ml-app-config
              key: DB_HOST
        - name: DB_PORT
          valueFrom:
            configMapKeyRef:
              name: rental-ml-app-config
              key: DB_PORT
        - name: DB_NAME
          valueFrom:
            configMapKeyRef:
              name: rental-ml-app-config
              key: DB_NAME
        - name: DB_USERNAME
          valueFrom:
            configMapKeyRef:
              name: rental-ml-app-config
              key: DB_USERNAME
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: rental-ml-database-secret
              key: postgres-password
        # Redis/Celery configuration
        - name: REDIS_HOST
          valueFrom:
            configMapKeyRef:
              name: rental-ml-app-config
              key: REDIS_HOST
        - name: REDIS_PORT
          valueFrom:
            configMapKeyRef:
              name: rental-ml-app-config
              key: REDIS_PORT
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: rental-ml-redis-secret
              key: redis-password
        - name: CELERY_BROKER_URL
          valueFrom:
            secretKeyRef:
              name: rental-ml-celery-secret
              key: celery-broker-url
        - name: CELERY_RESULT_BACKEND
          valueFrom:
            secretKeyRef:
              name: rental-ml-celery-secret
              key: celery-result-backend
        # Application configuration
        - name: APP_ENV
          valueFrom:
            configMapKeyRef:
              name: rental-ml-app-config
              key: APP_ENV
        - name: LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              name: rental-ml-app-config
              key: LOG_LEVEL
        # Security
        - name: SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: rental-ml-app-secret
              key: secret-key
        volumeMounts:
        - name: app-logs
          mountPath: /app/logs
        - name: scheduler-data
          mountPath: /app/scheduler
        - name: tmp
          mountPath: /tmp
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        # Health checks for Celery beat
        livenessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - "ps aux | grep 'celery.*beat' | grep -v grep"
          initialDelaySeconds: 60
          periodSeconds: 60
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - "ps aux | grep 'celery.*beat' | grep -v grep"
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 5
          failureThreshold: 3
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
          capabilities:
            drop:
            - ALL
      volumes:
      - name: app-logs
        persistentVolumeClaim:
          claimName: app-logs-pvc
      - name: scheduler-data
        persistentVolumeClaim:
          claimName: scheduler-data-pvc
      - name: tmp
        emptyDir: {}
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
      # Init containers to wait for dependencies
      initContainers:
      - name: wait-for-postgres
        image: postgres:15-alpine
        command: ['sh', '-c', 'until pg_isready -h postgres-service -p 5432; do echo waiting for postgres; sleep 2; done;']
        env:
        - name: PGUSER
          valueFrom:
            secretKeyRef:
              name: rental-ml-database-secret
              key: postgres-user
      - name: wait-for-redis
        image: redis:7-alpine
        command: ['sh', '-c', 'until redis-cli -h redis-service -p 6379 ping; do echo waiting for redis; sleep 2; done;']