---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx
  namespace: rental-ml
  labels:
    app.kubernetes.io/name: rental-ml-system
    app.kubernetes.io/component: nginx
    app.kubernetes.io/instance: nginx
    app.kubernetes.io/version: "alpine"
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 50%
  selector:
    matchLabels:
      app.kubernetes.io/name: rental-ml-system
      app.kubernetes.io/component: nginx
      app.kubernetes.io/instance: nginx
  template:
    metadata:
      labels:
        app.kubernetes.io/name: rental-ml-system
        app.kubernetes.io/component: nginx
        app.kubernetes.io/instance: nginx
        app.kubernetes.io/version: "alpine"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9113"
        prometheus.io/path: "/metrics"
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 101
        runAsGroup: 101
        fsGroup: 101
      containers:
      - name: nginx
        image: nginx:alpine
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 80
          name: http
          protocol: TCP
        - containerPort: 443
          name: https
          protocol: TCP
        volumeMounts:
        - name: nginx-config
          mountPath: /etc/nginx/nginx.conf
          subPath: nginx.conf
          readOnly: true
        - name: nginx-config
          mountPath: /etc/nginx/conf.d/default.conf
          subPath: default.conf
          readOnly: true
        - name: nginx-logs
          mountPath: /var/log/nginx
        - name: nginx-cache
          mountPath: /var/cache/nginx
        - name: nginx-run
          mountPath: /var/run
        - name: nginx-tmp
          mountPath: /tmp
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: http
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: http
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
          capabilities:
            drop:
            - ALL
            add:
            - NET_BIND_SERVICE
            - CHOWN
            - SETUID
            - SETGID
      # Nginx Prometheus Exporter
      - name: nginx-exporter
        image: nginx/nginx-prometheus-exporter:latest
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 9113
          name: metrics
          protocol: TCP
        args:
        - -nginx.scrape-uri=http://localhost:80/nginx_status
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
      volumes:
      - name: nginx-config
        configMap:
          name: rental-ml-nginx-config
          items:
          - key: nginx.conf
            path: nginx.conf
          - key: default.conf
            path: default.conf
      - name: nginx-logs
        persistentVolumeClaim:
          claimName: nginx-logs-pvc
      - name: nginx-cache
        emptyDir: {}
      - name: nginx-run
        emptyDir: {}
      - name: nginx-tmp
        emptyDir: {}
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
      # Init container to wait for app service
      initContainers:
      - name: wait-for-app
        image: curlimages/curl:latest
        command: ['sh', '-c', 'until curl -f http://app-service:8000/health; do echo waiting for app; sleep 2; done;']