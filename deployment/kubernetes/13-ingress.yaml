---
# Ingress for main application
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: rental-ml-ingress
  namespace: rental-ml
  labels:
    app.kubernetes.io/name: rental-ml-system
    app.kubernetes.io/component: ingress
  annotations:
    # Use appropriate ingress controller (nginx, traefik, etc.)
    kubernetes.io/ingress.class: "nginx"
    
    # Enable CORS
    nginx.ingress.kubernetes.io/enable-cors: "true"
    nginx.ingress.kubernetes.io/cors-allow-origin: "*"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, POST, PUT, DELETE, OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-headers: "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization,X-User-ID"
    
    # Rate limiting
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    
    # SSL redirect
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    
    # Request size limits
    nginx.ingress.kubernetes.io/proxy-body-size: "50m"
    
    # Timeouts
    nginx.ingress.kubernetes.io/proxy-connect-timeout: "30"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "30"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "60"
    
    # Health check
    nginx.ingress.kubernetes.io/health-check-path: "/health"
    
    # Buffering
    nginx.ingress.kubernetes.io/proxy-buffering: "on"
    nginx.ingress.kubernetes.io/proxy-buffer-size: "4k"
    
    # Certificate management (if using cert-manager)
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    
    # Custom headers
    nginx.ingress.kubernetes.io/configuration-snippet: |
      more_set_headers "X-Content-Type-Options: nosniff";
      more_set_headers "X-Frame-Options: DENY";
      more_set_headers "X-XSS-Protection: 1; mode=block";
      more_set_headers "Referrer-Policy: strict-origin-when-cross-origin";
      more_set_headers "Content-Security-Policy: default-src 'self'";
spec:
  tls:
  - hosts:
    - api.rental-ml.com
    - rental-ml.com
    secretName: rental-ml-tls-secret
  rules:
  - host: api.rental-ml.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: nginx-service
            port:
              number: 80
  - host: rental-ml.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: nginx-service
            port:
              number: 80
---
# Ingress for Prometheus (monitoring)
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: rental-ml-prometheus-ingress
  namespace: rental-ml
  labels:
    app.kubernetes.io/name: rental-ml-system
    app.kubernetes.io/component: monitoring
  annotations:
    kubernetes.io/ingress.class: "nginx"
    
    # Basic auth for Prometheus (security)
    nginx.ingress.kubernetes.io/auth-type: basic
    nginx.ingress.kubernetes.io/auth-secret: prometheus-basic-auth
    nginx.ingress.kubernetes.io/auth-realm: 'Authentication Required - Prometheus'
    
    # SSL redirect
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    
    # Rate limiting (stricter for monitoring)
    nginx.ingress.kubernetes.io/rate-limit: "10"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    
    # Certificate management
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
spec:
  tls:
  - hosts:
    - prometheus.rental-ml.com
    secretName: rental-ml-prometheus-tls-secret
  rules:
  - host: prometheus.rental-ml.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: prometheus-service
            port:
              number: 9090
---
# Secret for Prometheus basic auth
apiVersion: v1
kind: Secret
metadata:
  name: prometheus-basic-auth
  namespace: rental-ml
  labels:
    app.kubernetes.io/name: rental-ml-system
    app.kubernetes.io/component: monitoring
type: Opaque
data:
  # Generated with: htpasswd -nb admin password | base64
  # Username: admin, Password: password (change this!)
  auth: YWRtaW46JGFwcjEkSDY1N3hjdzAkMXB2aUtyMy9ERXozSzRBZ2k4VGl6LgoK
---
# Network Policy for Ingress traffic
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: allow-ingress-traffic
  namespace: rental-ml
  labels:
    app.kubernetes.io/name: rental-ml-system
    app.kubernetes.io/component: network-policy
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/component: nginx
  policyTypes:
  - Ingress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    ports:
    - protocol: TCP
      port: 80
    - protocol: TCP
      port: 443
  - from: []
    ports:
    - protocol: TCP
      port: 80
    - protocol: TCP
      port: 443