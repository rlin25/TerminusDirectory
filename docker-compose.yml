version: '3.8'

# Production Docker Compose configuration for Rental ML System
# This configuration is optimized for production deployment

services:
  # ================================
  # PostgreSQL Database
  # ================================
  postgres:
    image: postgres:15-alpine
    container_name: rental-ml-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME:-rental_ml}
      POSTGRES_USER: ${DB_USERNAME:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    ports:
      - "${DB_PORT:-5432}:5432"
    networks:
      - rental-ml-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USERNAME:-postgres} -d ${DB_NAME:-rental_ml}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    security_opt:
      - no-new-privileges:true
    tmpfs:
      - /tmp
      - /var/run/postgresql
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ================================
  # Redis Cache
  # ================================
  redis:
    image: redis:7-alpine
    container_name: rental-ml-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_password}
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis_password}
    volumes:
      - redis_data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf:ro
    ports:
      - "${REDIS_PORT:-6379}:6379"
    networks:
      - rental-ml-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    security_opt:
      - no-new-privileges:true
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ================================
  # Main Application
  # ================================
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: rental-ml-app
    restart: unless-stopped
    environment:
      # Database configuration
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${DB_NAME:-rental_ml}
      DB_USERNAME: ${DB_USERNAME:-postgres}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_POOL_SIZE: ${DB_POOL_SIZE:-10}
      DB_MAX_OVERFLOW: ${DB_MAX_OVERFLOW:-20}
      
      # Redis configuration
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis_password}
      REDIS_DB: ${REDIS_DB:-0}
      REDIS_MAX_CONNECTIONS: ${REDIS_MAX_CONNECTIONS:-20}
      
      # Application configuration
      APP_ENV: production
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      API_HOST: ${API_HOST:-0.0.0.0}
      API_PORT: ${API_PORT:-8000}
      
      # ML configuration
      ML_MODEL_PATH: /app/models
      ML_BATCH_SIZE: ${ML_BATCH_SIZE:-32}
      ML_CACHE_TTL: ${ML_CACHE_TTL:-3600}
      
      # Security
      SECRET_KEY: ${SECRET_KEY}
      JWT_SECRET_KEY: ${JWT_SECRET_KEY}
      
      # Monitoring
      SENTRY_DSN: ${SENTRY_DSN}
      PROMETHEUS_ENABLED: ${PROMETHEUS_ENABLED:-true}
      
      # Feature flags
      ENABLE_SCRAPING: ${ENABLE_SCRAPING:-true}
      ENABLE_ML_TRAINING: ${ENABLE_ML_TRAINING:-false}
      ENABLE_RECOMMENDATIONS: ${ENABLE_RECOMMENDATIONS:-true}
    volumes:
      - app_logs:/app/logs
      - ml_models:/app/models
      - app_data:/app/data
    ports:
      - "${API_PORT:-8000}:8000"
    networks:
      - rental-ml-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    security_opt:
      - no-new-privileges:true
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ================================
  # Background Task Worker (Celery)
  # ================================
  worker:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: rental-ml-worker
    restart: unless-stopped
    command: celery -A src.infrastructure.tasks.celery_app worker --loglevel=info --concurrency=2
    environment:
      # Database configuration
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${DB_NAME:-rental_ml}
      DB_USERNAME: ${DB_USERNAME:-postgres}
      DB_PASSWORD: ${DB_PASSWORD}
      
      # Redis configuration (used as Celery broker)
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis_password}
      CELERY_BROKER_URL: redis://:${REDIS_PASSWORD:-redis_password}@redis:6379/1
      CELERY_RESULT_BACKEND: redis://:${REDIS_PASSWORD:-redis_password}@redis:6379/2
      
      # Application configuration
      APP_ENV: production
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      
      # ML configuration
      ML_MODEL_PATH: /app/models
      ML_BATCH_SIZE: ${ML_BATCH_SIZE:-32}
      
      # Security
      SECRET_KEY: ${SECRET_KEY}
    volumes:
      - app_logs:/app/logs
      - ml_models:/app/models
      - app_data:/app/data
    networks:
      - rental-ml-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    security_opt:
      - no-new-privileges:true
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ================================
  # Task Scheduler (Celery Beat)
  # ================================
  scheduler:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: rental-ml-scheduler
    restart: unless-stopped
    command: celery -A src.infrastructure.tasks.celery_app beat --loglevel=info --scheduler django_celery_beat.schedulers:DatabaseScheduler
    environment:
      # Database configuration
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${DB_NAME:-rental_ml}
      DB_USERNAME: ${DB_USERNAME:-postgres}
      DB_PASSWORD: ${DB_PASSWORD}
      
      # Redis configuration
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis_password}
      CELERY_BROKER_URL: redis://:${REDIS_PASSWORD:-redis_password}@redis:6379/1
      CELERY_RESULT_BACKEND: redis://:${REDIS_PASSWORD:-redis_password}@redis:6379/2
      
      # Application configuration
      APP_ENV: production
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      
      # Security
      SECRET_KEY: ${SECRET_KEY}
    volumes:
      - app_logs:/app/logs
      - scheduler_data:/app/scheduler
    networks:
      - rental-ml-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    security_opt:
      - no-new-privileges:true
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ================================
  # Nginx Reverse Proxy
  # ================================
  nginx:
    image: nginx:alpine
    container_name: rental-ml-nginx
    restart: unless-stopped
    ports:
      - "${NGINX_PORT:-80}:80"
      - "${NGINX_SSL_PORT:-443}:443"
    volumes:
      - ./config/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./config/nginx-default.conf:/etc/nginx/conf.d/default.conf:ro
      - nginx_logs:/var/log/nginx
      - ./ssl:/etc/nginx/ssl:ro
    networks:
      - rental-ml-network
    depends_on:
      - app
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    security_opt:
      - no-new-privileges:true
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # ================================
  # Monitoring (Prometheus)
  # ================================
  prometheus:
    image: prom/prometheus:latest
    container_name: rental-ml-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    networks:
      - rental-ml-network
    security_opt:
      - no-new-privileges:true
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

# ================================
# Networks
# ================================
networks:
  rental-ml-network:
    driver: bridge
    name: rental-ml-network

# ================================
# Volumes
# ================================
volumes:
  postgres_data:
    driver: local
    name: rental-ml-postgres-data
  redis_data:
    driver: local
    name: rental-ml-redis-data
  app_logs:
    driver: local
    name: rental-ml-app-logs
  ml_models:
    driver: local
    name: rental-ml-models
  app_data:
    driver: local
    name: rental-ml-app-data
  scheduler_data:
    driver: local
    name: rental-ml-scheduler-data
  nginx_logs:
    driver: local
    name: rental-ml-nginx-logs
  prometheus_data:
    driver: local
    name: rental-ml-prometheus-data