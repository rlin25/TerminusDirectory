# Multi-stage production Dockerfile for ML Training service
# Optimized for GPU support, large datasets, and model training workloads

# ================================
# Build stage
# ================================
FROM python:3.11-slim as builder

# Set build environment variables
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1

# Install build dependencies including CUDA development tools
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    gcc \
    g++ \
    libc6-dev \
    libpq-dev \
    libxml2-dev \
    libxslt1-dev \
    zlib1g-dev \
    libblas-dev \
    liblapack-dev \
    libatlas-base-dev \
    gfortran \
    && rm -rf /var/lib/apt/lists/*

# Create build directory
WORKDIR /build

# Copy dependency files
COPY requirements/ ./requirements/
COPY pyproject.toml ./

# Install Python dependencies including ML/GPU packages
RUN pip install --no-cache-dir wheel && \
    pip install --no-cache-dir -r requirements/base.txt && \
    pip install --no-cache-dir -r requirements/prod.txt && \
    pip install --no-cache-dir \
        tensorflow==2.13.0 \
        torch==2.0.1 \
        torchvision==0.15.2 \
        scikit-learn==1.3.0 \
        xgboost==1.7.6 \
        lightgbm==4.0.0 \
        mlflow==2.5.0 \
        optuna==3.2.0 \
        jupyter==1.0.0 \
        jupyterlab==4.0.3

# Copy source code
COPY src/ ./src/
COPY scripts/ ./scripts/
COPY notebooks/ ./notebooks/

# ================================
# GPU-enabled production stage
# ================================
FROM nvidia/cuda:11.8-runtime-ubuntu22.04 as gpu-production

# Set production environment variables
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    APP_ENV=production \
    LOG_LEVEL=INFO \
    PYTHONPATH=/app/src \
    CUDA_VISIBLE_DEVICES=0 \
    NVIDIA_VISIBLE_DEVICES=all \
    NVIDIA_DRIVER_CAPABILITIES=compute,utility

# Install Python and runtime dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    python3.11 \
    python3.11-dev \
    python3-pip \
    libpq5 \
    libxml2 \
    libxslt1.1 \
    curl \
    ca-certificates \
    dumb-init \
    git \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get autoremove -y \
    && apt-get autoclean

# Create symlinks for python
RUN ln -s /usr/bin/python3.11 /usr/bin/python && \
    ln -s /usr/bin/python3.11 /usr/bin/python3

# Create non-root user for ML training
RUN groupadd -r -g 1000 mluser && \
    useradd -r -u 1000 -g mluser -d /app -s /bin/bash mluser

# Set working directory
WORKDIR /app

# Copy Python dependencies from builder stage
COPY --from=builder /usr/local/lib/python3.11/site-packages /usr/local/lib/python3.11/site-packages
COPY --from=builder /usr/local/bin /usr/local/bin

# Copy application code and notebooks
COPY --from=builder --chown=mluser:mluser /build/src/ ./src/
COPY --from=builder --chown=mluser:mluser /build/notebooks/ ./notebooks/
COPY --chown=mluser:mluser scripts/ml-training-entrypoint.sh ./

# Create necessary directories with proper permissions
RUN mkdir -p /app/logs /app/data /app/models /app/artifacts /app/checkpoints /app/tensorboard && \
    chown -R mluser:mluser /app && \
    chmod +x /app/ml-training-entrypoint.sh

# Switch to non-root user
USER mluser

# Expose Jupyter and MLflow ports
EXPOSE 8888 5000

# Add health check for training service
HEALTHCHECK --interval=60s --timeout=20s --start-period=60s --retries=3 \
    CMD python -c "import tensorflow as tf; print('TensorFlow version:', tf.__version__)" || exit 1

# Use dumb-init to handle signals properly
ENTRYPOINT ["/usr/bin/dumb-init", "--", "/app/ml-training-entrypoint.sh"]

# Default command for training
CMD ["python", "-m", "src.application.ml_training.production_training_pipeline"]

# ================================
# CPU-only production stage
# ================================
FROM python:3.11-slim as cpu-production

# Set production environment variables
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    APP_ENV=production \
    LOG_LEVEL=INFO \
    PYTHONPATH=/app/src

# Install runtime dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    libpq5 \
    libxml2 \
    libxslt1.1 \
    curl \
    ca-certificates \
    dumb-init \
    libblas3 \
    liblapack3 \
    libatlas3-base \
    && rm -rf /var/lib/apt/lists/* \
    && apt-get autoremove -y \
    && apt-get autoclean

# Create non-root user
RUN groupadd -r -g 1000 mluser && \
    useradd -r -u 1000 -g mluser -d /app -s /bin/bash mluser

# Set working directory
WORKDIR /app

# Copy Python dependencies from builder stage
COPY --from=builder /usr/local/lib/python3.11/site-packages /usr/local/lib/python3.11/site-packages
COPY --from=builder /usr/local/bin /usr/local/bin

# Copy application code
COPY --from=builder --chown=mluser:mluser /build/src/ ./src/
COPY --from=builder --chown=mluser:mluser /build/notebooks/ ./notebooks/
COPY --chown=mluser:mluser scripts/ml-training-entrypoint.sh ./

# Create directories
RUN mkdir -p /app/logs /app/data /app/models /app/artifacts && \
    chown -R mluser:mluser /app && \
    chmod +x /app/ml-training-entrypoint.sh

# Switch to non-root user
USER mluser

# Expose ports
EXPOSE 8888 5000

# Health check
HEALTHCHECK --interval=60s --timeout=20s --start-period=60s --retries=3 \
    CMD python -c "import sklearn; print('Scikit-learn version:', sklearn.__version__)" || exit 1

# Entrypoint and command
ENTRYPOINT ["/usr/bin/dumb-init", "--", "/app/ml-training-entrypoint.sh"]
CMD ["python", "-m", "src.application.ml_training.production_training_pipeline"]