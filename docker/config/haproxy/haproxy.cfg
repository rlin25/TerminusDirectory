# HAProxy Configuration for Rental ML System Production Load Balancing
# High availability, SSL termination, and health monitoring

global
    # Process management
    daemon
    user haproxy
    group haproxy
    pidfile /var/run/haproxy.pid
    
    # Performance tuning
    maxconn 4096
    nbproc 1
    nbthread 4
    
    # SSL configuration
    ssl-default-bind-ciphers ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256
    ssl-default-bind-options ssl-min-ver TLSv1.2 no-tls-tickets
    ssl-default-server-ciphers ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256
    ssl-default-server-options ssl-min-ver TLSv1.2 no-tls-tickets
    
    # Logging
    log stdout local0 info
    
    # Security
    chroot /var/lib/haproxy
    stats socket /run/haproxy/admin.sock mode 660 level admin
    stats timeout 30s

defaults
    # Mode and timeouts
    mode http
    timeout connect 5000ms
    timeout client 50000ms
    timeout server 50000ms
    timeout http-request 15s
    timeout http-keep-alive 15s
    
    # Health checks
    option httpchk GET /health
    
    # Logging
    option httplog
    option dontlognull
    option log-health-checks
    
    # Compression
    compression algo gzip
    compression type text/html text/css text/javascript application/javascript application/json application/xml text/xml text/plain
    
    # Security headers
    option forwardfor
    option http-server-close
    
    # Error pages
    errorfile 400 /etc/haproxy/errors/400.http
    errorfile 403 /etc/haproxy/errors/403.http
    errorfile 408 /etc/haproxy/errors/408.http
    errorfile 500 /etc/haproxy/errors/500.http
    errorfile 502 /etc/haproxy/errors/502.http
    errorfile 503 /etc/haproxy/errors/503.http
    errorfile 504 /etc/haproxy/errors/504.http

# ================================
# Frontend Configuration
# ================================

# HTTP Frontend - Redirect to HTTPS
frontend http_frontend
    bind *:80
    mode http
    
    # Security headers
    http-response set-header X-Frame-Options SAMEORIGIN
    http-response set-header X-Content-Type-Options nosniff
    http-response set-header X-XSS-Protection "1; mode=block"
    http-response set-header Referrer-Policy "strict-origin-when-cross-origin"
    
    # Health check endpoint for load balancer
    acl is_health_check path_beg /lb-health
    http-request return status 200 content-type text/plain string "OK" if is_health_check
    
    # Redirect HTTP to HTTPS
    redirect scheme https code 301 if !{ ssl_fc }

# HTTPS Frontend - Main Application
frontend https_frontend
    bind *:443 ssl crt /etc/ssl/certs/rental-ml.pem alpn h2,http/1.1
    mode http
    
    # Security headers
    http-response set-header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload"
    http-response set-header X-Frame-Options SAMEORIGIN
    http-response set-header X-Content-Type-Options nosniff
    http-response set-header X-XSS-Protection "1; mode=block"
    http-response set-header Referrer-Policy "strict-origin-when-cross-origin"
    http-response set-header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'"
    
    # Rate limiting
    stick-table type ip size 100k expire 30s store http_req_rate(10s),http_err_rate(10s),conn_cur,sess_rate(3s)
    http-request track-sc0 src
    http-request deny if { sc_http_req_rate(0) gt 100 }
    http-request deny if { sc_http_err_rate(0) gt 20 }
    
    # API routing
    acl is_api path_beg /api/
    acl is_docs path_beg /docs /redoc /openapi.json
    acl is_health path_beg /health
    acl is_metrics path_beg /metrics
    
    # Monitoring endpoints
    acl is_grafana path_beg /grafana/
    acl is_prometheus path_beg /prometheus/
    acl is_kibana path_beg /kibana/
    acl is_jaeger path_beg /jaeger/
    
    # Backend routing
    use_backend api_backend if is_api or is_docs or is_health or is_metrics
    use_backend grafana_backend if is_grafana
    use_backend prometheus_backend if is_prometheus
    use_backend kibana_backend if is_kibana
    use_backend jaeger_backend if is_jaeger
    
    # Default to API backend
    default_backend api_backend

# ================================
# Backend Configuration
# ================================

# API Backend - Main Application Servers
backend api_backend
    balance roundrobin
    option httpchk GET /health HTTP/1.1\r\nHost:\ localhost
    http-check expect status 200
    
    # Health check configuration
    default-server check inter 10s rise 2 fall 3 maxconn 100
    
    # API server instances
    server api-1 api-1:8000 check cookie api-1 weight 100
    server api-2 api-2:8000 check cookie api-2 weight 100
    
    # Session persistence
    cookie SERVERID insert indirect nocache
    
    # Connection pooling
    option http-keep-alive
    option prefer-last-server
    
    # Retry configuration
    retry-on all-retryable-errors
    retries 3
    
    # Request/response modifications
    http-request add-header X-Forwarded-Proto https if { ssl_fc }
    http-request add-header X-Forwarded-Port %[dst_port]
    http-request add-header X-Real-IP %[src]
    
    # Timeout configuration
    timeout server 30s
    timeout connect 5s

# Grafana Backend
backend grafana_backend
    balance first
    option httpchk GET /api/health HTTP/1.1\r\nHost:\ localhost
    http-check expect status 200
    
    # Grafana server
    server grafana grafana:3000 check inter 30s rise 2 fall 3
    
    # Path rewriting
    http-request replace-path /grafana/(.*) /\1
    
    # Timeout configuration
    timeout server 60s

# Prometheus Backend
backend prometheus_backend
    balance first
    option httpchk GET /-/healthy HTTP/1.1\r\nHost:\ localhost
    http-check expect status 200
    
    # Prometheus server
    server prometheus prometheus:9090 check inter 30s rise 2 fall 3
    
    # Path rewriting
    http-request replace-path /prometheus/(.*) /\1
    
    # Timeout configuration
    timeout server 60s

# Kibana Backend
backend kibana_backend
    balance first
    option httpchk GET /api/status HTTP/1.1\r\nHost:\ localhost
    http-check expect status 200
    
    # Kibana server
    server kibana kibana:5601 check inter 30s rise 2 fall 3
    
    # Path rewriting
    http-request replace-path /kibana/(.*) /\1
    
    # Timeout configuration
    timeout server 60s

# Jaeger Backend
backend jaeger_backend
    balance first
    option httpchk GET / HTTP/1.1\r\nHost:\ localhost
    http-check expect status 200
    
    # Jaeger server
    server jaeger jaeger:16686 check inter 30s rise 2 fall 3
    
    # Path rewriting
    http-request replace-path /jaeger/(.*) /\1
    
    # Timeout configuration
    timeout server 60s

# ================================
# Statistics and Monitoring
# ================================

# HAProxy Statistics
listen stats
    bind *:8404
    mode http
    stats enable
    stats uri /stats
    stats refresh 30s
    stats admin if TRUE
    stats auth admin:your-stats-password
    
    # Statistics customization
    stats realm HAProxy\ Statistics
    stats show-legends
    stats show-node
    
    # Hide sensitive information
    stats hide-version
    
    # Enable statistics socket
    stats socket /var/run/haproxy/stats level admin

# ================================
# Error Handling
# ================================

# Custom error pages
errorfile 400 /etc/haproxy/errors/400.http
errorfile 403 /etc/haproxy/errors/403.http
errorfile 408 /etc/haproxy/errors/408.http
errorfile 500 /etc/haproxy/errors/500.http
errorfile 502 /etc/haproxy/errors/502.http
errorfile 503 /etc/haproxy/errors/503.http
errorfile 504 /etc/haproxy/errors/504.http