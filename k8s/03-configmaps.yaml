---
# Application Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: rental-ml-app-config
  namespace: rental-ml
  labels:
    app.kubernetes.io/name: rental-ml-system
    app.kubernetes.io/component: config
    app.kubernetes.io/instance: app-config
data:
  # Database configuration
  DB_HOST: "postgres-service"
  DB_PORT: "5432"
  DB_NAME: "rental_ml"
  DB_USERNAME: "postgres"
  DB_POOL_SIZE: "10"
  DB_MAX_OVERFLOW: "20"
  
  # Redis configuration
  REDIS_HOST: "redis-service"
  REDIS_PORT: "6379"
  REDIS_DB: "0"
  REDIS_MAX_CONNECTIONS: "20"
  
  # Application configuration
  APP_ENV: "production"
  LOG_LEVEL: "INFO"
  API_HOST: "0.0.0.0"
  API_PORT: "8000"
  
  # ML configuration
  ML_MODEL_PATH: "/app/models"
  ML_BATCH_SIZE: "32"
  ML_CACHE_TTL: "3600"
  
  # Monitoring configuration
  PROMETHEUS_ENABLED: "true"
  
  # Feature flags
  ENABLE_SCRAPING: "true"
  ENABLE_ML_TRAINING: "false"
  ENABLE_RECOMMENDATIONS: "true"
---
# Celery Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: rental-ml-celery-config
  namespace: rental-ml
  labels:
    app.kubernetes.io/name: rental-ml-system
    app.kubernetes.io/component: config
    app.kubernetes.io/instance: celery-config
data:
  CELERY_WORKER_CONCURRENCY: "2"
  CELERY_WORKER_PREFETCH_MULTIPLIER: "1"
  CELERY_TASK_SERIALIZER: "json"
  CELERY_RESULT_SERIALIZER: "json"
  CELERY_ACCEPT_CONTENT: '["json"]'
  CELERY_TIMEZONE: "UTC"
  CELERY_ENABLE_UTC: "true"
  CELERY_TASK_TRACK_STARTED: "true"
  CELERY_TASK_TIME_LIMIT: "300"
  CELERY_TASK_SOFT_TIME_LIMIT: "240"
---
# PostgreSQL Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: rental-ml-postgres-config
  namespace: rental-ml
  labels:
    app.kubernetes.io/name: rental-ml-system
    app.kubernetes.io/component: database
    app.kubernetes.io/instance: postgres-config
data:
  POSTGRES_DB: "rental_ml"
  POSTGRES_USER: "postgres"
  POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
  PGDATA: "/var/lib/postgresql/data/pgdata"
---
# Redis Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: rental-ml-redis-config
  namespace: rental-ml
  labels:
    app.kubernetes.io/name: rental-ml-system
    app.kubernetes.io/component: redis
    app.kubernetes.io/instance: redis-config
data:
  redis.conf: |
    # Redis configuration for rental ML system
    maxmemory 512mb
    maxmemory-policy allkeys-lru
    timeout 300
    tcp-keepalive 60
    save 900 1
    save 300 10
    save 60 10000
    appendonly yes
    appendfsync everysec
    auto-aof-rewrite-percentage 100
    auto-aof-rewrite-min-size 64mb
---
# Nginx Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: rental-ml-nginx-config
  namespace: rental-ml
  labels:
    app.kubernetes.io/name: rental-ml-system
    app.kubernetes.io/component: nginx
    app.kubernetes.io/instance: nginx-config
data:
  nginx.conf: |
    user nginx;
    worker_processes auto;
    error_log /var/log/nginx/error.log warn;
    pid /var/run/nginx.pid;
    
    events {
        worker_connections 1024;
        use epoll;
        multi_accept on;
    }
    
    http {
        include /etc/nginx/mime.types;
        default_type application/octet-stream;
        
        log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                        '$status $body_bytes_sent "$http_referer" '
                        '"$http_user_agent" "$http_x_forwarded_for"';
        
        access_log /var/log/nginx/access.log main;
        
        sendfile on;
        tcp_nopush on;
        tcp_nodelay on;
        keepalive_timeout 65;
        types_hash_max_size 2048;
        
        gzip on;
        gzip_vary on;
        gzip_proxied any;
        gzip_comp_level 6;
        gzip_types
            text/plain
            text/css
            text/xml
            text/javascript
            application/json
            application/javascript
            application/xml+rss
            application/atom+xml
            image/svg+xml;
        
        upstream app_backend {
            server app-service:8000;
        }
        
        server {
            listen 80;
            server_name _;
            
            # Health check endpoint
            location /nginx-health {
                access_log off;
                return 200 "healthy\n";
                add_header Content-Type text/plain;
            }
            
            # Proxy to application
            location / {
                proxy_pass http://app_backend;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
                
                proxy_connect_timeout 30s;
                proxy_send_timeout 30s;
                proxy_read_timeout 30s;
                
                proxy_buffering on;
                proxy_buffer_size 4k;
                proxy_buffers 8 4k;
                proxy_busy_buffers_size 8k;
            }
            
            # Static files (if any)
            location /static/ {
                alias /app/static/;
                expires 1y;
                add_header Cache-Control "public, immutable";
            }
        }
    }
---
# Prometheus Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: rental-ml-prometheus-config
  namespace: rental-ml
  labels:
    app.kubernetes.io/name: rental-ml-system
    app.kubernetes.io/component: monitoring
    app.kubernetes.io/instance: prometheus-config
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s
      evaluation_interval: 15s
      external_labels:
        cluster: 'rental-ml-cluster'
        environment: 'production'
    
    rule_files:
      - "/etc/prometheus/rules/*.yml"
    
    alerting:
      alertmanagers:
        - static_configs:
            - targets:
              - alertmanager:9093
    
    scrape_configs:
      - job_name: 'prometheus'
        static_configs:
          - targets: ['localhost:9090']
      
      - job_name: 'rental-ml-app'
        static_configs:
          - targets: ['app-service:8000']
        metrics_path: '/metrics'
        scrape_interval: 30s
      
      - job_name: 'rental-ml-worker'
        static_configs:
          - targets: ['worker-service:9540']
        metrics_path: '/metrics'
        scrape_interval: 30s
      
      - job_name: 'redis'
        static_configs:
          - targets: ['redis-service:9121']
        metrics_path: '/metrics'
        scrape_interval: 30s
      
      - job_name: 'postgres'
        static_configs:
          - targets: ['postgres-service:9187']
        metrics_path: '/metrics'
        scrape_interval: 30s
      
      - job_name: 'nginx'
        static_configs:
          - targets: ['nginx-service:9113']
        metrics_path: '/metrics'
        scrape_interval: 30s
      
      - job_name: 'kubernetes-pods'
        kubernetes_sd_configs:
          - role: pod
            namespaces:
              names:
                - rental-ml
        relabel_configs:
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
            action: keep
            regex: true
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
            action: replace
            target_label: __metrics_path__
            regex: (.+)
          - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
            action: replace
            regex: ([^:]+)(?::\d+)?;(\d+)
            replacement: $1:$2
            target_label: __address__
          - action: labelmap
            regex: __meta_kubernetes_pod_label_(.+)
          - source_labels: [__meta_kubernetes_namespace]
            action: replace
            target_label: kubernetes_namespace
          - source_labels: [__meta_kubernetes_pod_name]
            action: replace
            target_label: kubernetes_pod_name