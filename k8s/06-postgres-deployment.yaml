---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres
  namespace: rental-ml
  labels:
    app.kubernetes.io/name: rental-ml-system
    app.kubernetes.io/component: database
    app.kubernetes.io/instance: postgres
    app.kubernetes.io/version: "15"
spec:
  serviceName: postgres-headless
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: rental-ml-system
      app.kubernetes.io/component: database
      app.kubernetes.io/instance: postgres
  template:
    metadata:
      labels:
        app.kubernetes.io/name: rental-ml-system
        app.kubernetes.io/component: database
        app.kubernetes.io/instance: postgres
        app.kubernetes.io/version: "15"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9187"
        prometheus.io/path: "/metrics"
    spec:
      securityContext:
        runAsUser: 999
        runAsGroup: 999
        fsGroup: 999
        runAsNonRoot: true
      serviceAccountName: rental-ml-app
      containers:
      - name: postgres
        image: postgres:15-alpine
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 5432
          name: postgres
          protocol: TCP
        env:
        - name: POSTGRES_DB
          valueFrom:
            configMapKeyRef:
              name: rental-ml-postgres-config
              key: POSTGRES_DB
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: rental-ml-database-secret
              key: postgres-user
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: rental-ml-database-secret
              key: postgres-password
        - name: POSTGRES_INITDB_ARGS
          valueFrom:
            configMapKeyRef:
              name: rental-ml-postgres-config
              key: POSTGRES_INITDB_ARGS
        - name: PGDATA
          valueFrom:
            configMapKeyRef:
              name: rental-ml-postgres-config
              key: PGDATA
        volumeMounts:
        - name: postgres-data
          mountPath: /var/lib/postgresql/data
        - name: postgres-initdb
          mountPath: /docker-entrypoint-initdb.d
          readOnly: true
        - name: tmp
          mountPath: /tmp
        - name: run
          mountPath: /var/run/postgresql
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        livenessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - exec pg_isready -U "$POSTGRES_USER" -d "$POSTGRES_DB" -h 127.0.0.1 -p 5432
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 5
        readinessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - exec pg_isready -U "$POSTGRES_USER" -d "$POSTGRES_DB" -h 127.0.0.1 -p 5432
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        startupProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - exec pg_isready -U "$POSTGRES_USER" -d "$POSTGRES_DB" -h 127.0.0.1 -p 5432
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 10
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
          capabilities:
            drop:
            - ALL
      # PostgreSQL Exporter for Prometheus
      - name: postgres-exporter
        image: prometheuscommunity/postgres-exporter:latest
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 9187
          name: metrics
          protocol: TCP
        env:
        - name: DATA_SOURCE_NAME
          value: "postgresql://$(POSTGRES_USER):$(POSTGRES_PASSWORD)@localhost:5432/$(POSTGRES_DB)?sslmode=disable"
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: rental-ml-database-secret
              key: postgres-user
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: rental-ml-database-secret
              key: postgres-password
        - name: POSTGRES_DB
          valueFrom:
            configMapKeyRef:
              name: rental-ml-postgres-config
              key: POSTGRES_DB
        resources:
          requests:
            memory: "32Mi"
            cpu: "10m"
          limits:
            memory: "128Mi"
            cpu: "100m"
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 65534
          capabilities:
            drop:
            - ALL
      volumes:
      - name: postgres-initdb
        configMap:
          name: rental-ml-postgres-init
          defaultMode: 0755
      - name: tmp
        emptyDir: {}
      - name: run
        emptyDir: {}
      restartPolicy: Always
      terminationGracePeriodSeconds: 60
  volumeClaimTemplates:
  - metadata:
      name: postgres-data
      labels:
        app.kubernetes.io/name: rental-ml-system
        app.kubernetes.io/component: database
        app.kubernetes.io/instance: postgres
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 50Gi
      storageClassName: rental-ml-fast-ssd
---
# PostgreSQL Init Scripts ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: rental-ml-postgres-init
  namespace: rental-ml
  labels:
    app.kubernetes.io/name: rental-ml-system
    app.kubernetes.io/component: database
    app.kubernetes.io/instance: postgres-init
data:
  init-db.sql: |
    -- Initialize database for Rental ML System
    CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
    CREATE EXTENSION IF NOT EXISTS "pg_trgm";
    CREATE EXTENSION IF NOT EXISTS "btree_gin";
    
    -- Create application user if not exists
    DO
    $$
    BEGIN
       IF NOT EXISTS (SELECT FROM pg_catalog.pg_roles WHERE rolname = 'rental_ml_app') THEN
          CREATE ROLE rental_ml_app WITH LOGIN PASSWORD 'app_password';
       END IF;
    END
    $$;
    
    -- Grant necessary permissions
    GRANT CONNECT ON DATABASE rental_ml TO rental_ml_app;
    GRANT USAGE ON SCHEMA public TO rental_ml_app;
    GRANT CREATE ON SCHEMA public TO rental_ml_app;
    ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL ON TABLES TO rental_ml_app;
    ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT ALL ON SEQUENCES TO rental_ml_app;
    
    -- Create indexes for performance
    -- Note: Actual table creation will be handled by the application migration