---
# Network Policy for Database
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: postgres-network-policy
  namespace: rental-ml
  labels:
    app.kubernetes.io/name: rental-ml-system
    app.kubernetes.io/component: database
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/component: database
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - podSelector:
        matchLabels:
          app.kubernetes.io/component: app
    - podSelector:
        matchLabels:
          app.kubernetes.io/component: worker
    - podSelector:
        matchLabels:
          app.kubernetes.io/component: scheduler
    - podSelector:
        matchLabels:
          app.kubernetes.io/component: monitoring
    ports:
    - protocol: TCP
      port: 5432
    - protocol: TCP
      port: 9187  # Postgres exporter
  egress:
  - {} # Allow all egress for database
---
# Network Policy for Redis
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: redis-network-policy
  namespace: rental-ml
  labels:
    app.kubernetes.io/name: rental-ml-system
    app.kubernetes.io/component: redis
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/component: redis
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - podSelector:
        matchLabels:
          app.kubernetes.io/component: app
    - podSelector:
        matchLabels:
          app.kubernetes.io/component: worker
    - podSelector:
        matchLabels:
          app.kubernetes.io/component: scheduler
    - podSelector:
        matchLabels:
          app.kubernetes.io/component: monitoring
    ports:
    - protocol: TCP
      port: 6379
    - protocol: TCP
      port: 9121  # Redis exporter
  egress:
  - {} # Allow all egress for Redis
---
# Network Policy for Application
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: app-network-policy
  namespace: rental-ml
  labels:
    app.kubernetes.io/name: rental-ml-system
    app.kubernetes.io/component: app
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/component: app
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - podSelector:
        matchLabels:
          app.kubernetes.io/component: nginx
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx  # Allow from ingress controller
    ports:
    - protocol: TCP
      port: 8000
  egress:
  - to:
    - podSelector:
        matchLabels:
          app.kubernetes.io/component: database
    ports:
    - protocol: TCP
      port: 5432
  - to:
    - podSelector:
        matchLabels:
          app.kubernetes.io/component: redis
    ports:
    - protocol: TCP
      port: 6379
  - to: {}  # Allow external API calls
    ports:
    - protocol: TCP
      port: 443
    - protocol: TCP
      port: 80
    - protocol: UDP
      port: 53  # DNS
---
# Network Policy for Workers
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: worker-network-policy
  namespace: rental-ml
  labels:
    app.kubernetes.io/name: rental-ml-system
    app.kubernetes.io/component: worker
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/component: worker
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - podSelector:
        matchLabels:
          app.kubernetes.io/component: monitoring
    ports:
    - protocol: TCP
      port: 9540  # Celery metrics
  egress:
  - to:
    - podSelector:
        matchLabels:
          app.kubernetes.io/component: database
    ports:
    - protocol: TCP
      port: 5432
  - to:
    - podSelector:
        matchLabels:
          app.kubernetes.io/component: redis
    ports:
    - protocol: TCP
      port: 6379
  - to: {}  # Allow external API calls for scraping
    ports:
    - protocol: TCP
      port: 443
    - protocol: TCP
      port: 80
    - protocol: UDP
      port: 53  # DNS
---
# Network Policy for Nginx
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: nginx-network-policy
  namespace: rental-ml
  labels:
    app.kubernetes.io/name: rental-ml-system
    app.kubernetes.io/component: nginx
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/component: nginx
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from: []  # Allow from anywhere (public facing)
    ports:
    - protocol: TCP
      port: 80
    - protocol: TCP
      port: 443
  - from:
    - podSelector:
        matchLabels:
          app.kubernetes.io/component: monitoring
    ports:
    - protocol: TCP
      port: 9113  # Nginx metrics
  egress:
  - to:
    - podSelector:
        matchLabels:
          app.kubernetes.io/component: app
    ports:
    - protocol: TCP
      port: 8000
  - to: {}  # Allow DNS resolution
    ports:
    - protocol: UDP
      port: 53
---
# Network Policy for Monitoring
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: monitoring-network-policy
  namespace: rental-ml
  labels:
    app.kubernetes.io/name: rental-ml-system
    app.kubernetes.io/component: monitoring
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/component: monitoring
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx  # Allow from ingress controller
    - podSelector: {}  # Allow from all pods in the same namespace
    ports:
    - protocol: TCP
      port: 9090  # Prometheus
    - protocol: TCP
      port: 3000  # Grafana
  egress:
  - to:
    - podSelector: {}  # Allow scraping all pods in namespace
  - to: {}  # Allow external connections for alerting
    ports:
    - protocol: TCP
      port: 443
    - protocol: TCP
      port: 80
    - protocol: UDP
      port: 53  # DNS