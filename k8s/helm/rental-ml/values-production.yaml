# Production values for Rental ML Helm chart
global:
  environment: production
  imageRegistry: ghcr.io
  imagePullSecrets:
    - name: ghcr-secret
  
  # Resource limits for production
  resources:
    limits:
      cpu: "2000m"
      memory: "4Gi"
    requests:
      cpu: "1000m"
      memory: "2Gi"

  # Security context
  securityContext:
    runAsNonRoot: true
    runAsUser: 1001
    runAsGroup: 1001
    fsGroup: 1001
    seccompProfile:
      type: RuntimeDefault

  # Pod disruption budget
  podDisruptionBudget:
    enabled: true
    minAvailable: 2

  # Monitoring
  monitoring:
    enabled: true
    serviceMonitor:
      enabled: true
      interval: 30s
      scrapeTimeout: 10s

# Main API application
api:
  enabled: true
  name: rental-ml-api
  
  image:
    repository: ghcr.io/rental-ml-system/api
    tag: "latest"
    pullPolicy: Always

  replicaCount: 3
  
  # HPA configuration
  autoscaling:
    enabled: true
    minReplicas: 3
    maxReplicas: 20
    targetCPUUtilizationPercentage: 70
    targetMemoryUtilizationPercentage: 80
    behavior:
      scaleDown:
        stabilizationWindowSeconds: 300
        policies:
        - type: Percent
          value: 10
          periodSeconds: 60
      scaleUp:
        stabilizationWindowSeconds: 60
        policies:
        - type: Percent
          value: 50
          periodSeconds: 60
        - type: Pods
          value: 2
          periodSeconds: 60
        selectPolicy: Max

  # VPA configuration
  verticalPodAutoscaler:
    enabled: true
    updateMode: "Auto"
    controlledResources: ["cpu", "memory"]

  # Resource requirements
  resources:
    limits:
      cpu: "2000m"
      memory: "4Gi"
      ephemeral-storage: "2Gi"
    requests:
      cpu: "1000m"
      memory: "2Gi"
      ephemeral-storage: "1Gi"

  # Probes
  livenessProbe:
    httpGet:
      path: /health
      port: 8000
    initialDelaySeconds: 30
    periodSeconds: 30
    timeoutSeconds: 10
    failureThreshold: 3
    successThreshold: 1

  readinessProbe:
    httpGet:
      path: /health/ready
      port: 8000
    initialDelaySeconds: 15
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3
    successThreshold: 1

  startupProbe:
    httpGet:
      path: /health/startup
      port: 8000
    initialDelaySeconds: 10
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 30
    successThreshold: 1

  # Service configuration
  service:
    type: ClusterIP
    port: 8000
    targetPort: 8000
    annotations:
      prometheus.io/scrape: "true"
      prometheus.io/port: "8000"
      prometheus.io/path: "/metrics"

  # Environment variables
  env:
    - name: ENVIRONMENT
      value: "production"
    - name: LOG_LEVEL
      value: "info"
    - name: DATABASE_URL
      valueFrom:
        secretKeyRef:
          name: rental-ml-secrets
          key: database-url
    - name: REDIS_URL
      valueFrom:
        secretKeyRef:
          name: rental-ml-secrets
          key: redis-url
    - name: SECRET_KEY
      valueFrom:
        secretKeyRef:
          name: rental-ml-secrets
          key: secret-key
    - name: JAEGER_AGENT_HOST
      value: "jaeger-agent.monitoring.svc.cluster.local"
    - name: OTEL_EXPORTER_JAEGER_ENDPOINT
      value: "http://jaeger-collector.monitoring.svc.cluster.local:14268/api/traces"

  # Pod annotations
  podAnnotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "8000"
    prometheus.io/path: "/metrics"
    sidecar.istio.io/inject: "true"
    sidecar.istio.io/proxyCPU: "100m"
    sidecar.istio.io/proxyMemory: "128Mi"

  # Node affinity and anti-affinity
  affinity:
    podAntiAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
      - weight: 100
        podAffinityTerm:
          labelSelector:
            matchExpressions:
            - key: app
              operator: In
              values:
              - rental-ml-api
          topologyKey: kubernetes.io/hostname
      - weight: 50
        podAffinityTerm:
          labelSelector:
            matchExpressions:
            - key: app
              operator: In
              values:
              - rental-ml-api
          topologyKey: topology.kubernetes.io/zone

  # Tolerations
  tolerations:
  - key: "workload"
    operator: "Equal"
    value: "user"
    effect: "NoSchedule"

  # Network policies
  networkPolicy:
    enabled: true
    ingress:
    - from:
      - namespaceSelector:
          matchLabels:
            name: istio-system
      ports:
      - protocol: TCP
        port: 8000
    - from:
      - namespaceSelector:
          matchLabels:
            name: monitoring
      ports:
      - protocol: TCP
        port: 8000
    egress:
    - to:
      - namespaceSelector:
          matchLabels:
            name: rental-ml-production
      ports:
      - protocol: TCP
        port: 5432
      - protocol: TCP
        port: 6379
    - to: []
      ports:
      - protocol: TCP
        port: 443
      - protocol: TCP
        port: 53
      - protocol: UDP
        port: 53

# Worker service
worker:
  enabled: true
  name: rental-ml-worker
  
  image:
    repository: ghcr.io/rental-ml-system/api
    tag: "latest"
    pullPolicy: Always

  command: ["python", "-m", "celery", "worker"]
  args: ["--app=src.application.api.main:celery_app", "--loglevel=info", "--concurrency=4"]

  replicaCount: 3

  autoscaling:
    enabled: true
    minReplicas: 3
    maxReplicas: 15
    targetCPUUtilizationPercentage: 80
    targetMemoryUtilizationPercentage: 85

  resources:
    limits:
      cpu: "1500m"
      memory: "3Gi"
    requests:
      cpu: "500m"
      memory: "1Gi"

  # Environment variables
  env:
    - name: ENVIRONMENT
      value: "production"
    - name: CELERY_BROKER_URL
      valueFrom:
        secretKeyRef:
          name: rental-ml-secrets
          key: redis-url
    - name: CELERY_RESULT_BACKEND
      valueFrom:
        secretKeyRef:
          name: rental-ml-secrets
          key: redis-url
    - name: DATABASE_URL
      valueFrom:
        secretKeyRef:
          name: rental-ml-secrets
          key: database-url

  podAnnotations:
    sidecar.istio.io/inject: "true"

# ML Training service
mlTraining:
  enabled: true
  name: rental-ml-training
  
  image:
    repository: ghcr.io/rental-ml-system/ml-training
    tag: "latest"
    pullPolicy: Always

  replicaCount: 1

  # Use spot instances for training
  tolerations:
  - key: "nvidia.com/gpu"
    operator: "Equal"
    value: "true"
    effect: "NoSchedule"
  - key: "kubernetes.azure.com/scalesetpriority"
    operator: "Equal"
    value: "spot"
    effect: "NoSchedule"

  nodeSelector:
    nodepool-type: "gpu"
    accelerator: "nvidia-tesla-v100"

  resources:
    limits:
      cpu: "4000m"
      memory: "16Gi"
      nvidia.com/gpu: 1
    requests:
      cpu: "2000m"
      memory: "8Gi"
      nvidia.com/gpu: 1

  # Job configuration for training
  job:
    enabled: true
    schedule: "0 2 * * *"  # Daily at 2 AM
    concurrencyPolicy: Forbid
    successfulJobsHistoryLimit: 3
    failedJobsHistoryLimit: 1
    backoffLimit: 3
    completions: 1
    parallelism: 1

# Scraping service
scraper:
  enabled: true
  name: rental-ml-scraper
  
  image:
    repository: ghcr.io/rental-ml-system/scraping
    tag: "latest"
    pullPolicy: Always

  replicaCount: 2

  autoscaling:
    enabled: true
    minReplicas: 2
    maxReplicas: 8
    targetCPUUtilizationPercentage: 75

  resources:
    limits:
      cpu: "1000m"
      memory: "2Gi"
    requests:
      cpu: "500m"
      memory: "1Gi"

  # Schedule scraping jobs
  cronJob:
    enabled: true
    schedule: "0 */4 * * *"  # Every 4 hours
    concurrencyPolicy: Replace
    successfulJobsHistoryLimit: 3
    failedJobsHistoryLimit: 1

# PostgreSQL (if using in-cluster database)
postgresql:
  enabled: false  # Use external managed database in production
  auth:
    existingSecret: "rental-ml-secrets"
    secretKeys:
      adminPasswordKey: "postgres-password"
  primary:
    persistence:
      enabled: true
      size: 100Gi
      storageClass: "premium-ssd"
    resources:
      limits:
        cpu: "2000m"
        memory: "4Gi"
      requests:
        cpu: "1000m"
        memory: "2Gi"

# Redis (if using in-cluster cache)
redis:
  enabled: false  # Use external managed Redis in production
  auth:
    enabled: true
    existingSecret: "rental-ml-secrets"
    existingSecretPasswordKey: "redis-password"
  master:
    persistence:
      enabled: true
      size: 50Gi
      storageClass: "premium-ssd"
    resources:
      limits:
        cpu: "1000m"
        memory: "2Gi"
      requests:
        cpu: "500m"
        memory: "1Gi"

# Ingress configuration
ingress:
  enabled: true
  className: "istio"
  annotations:
    kubernetes.io/ingress.class: "istio"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
  hosts:
  - host: api.rental-ml.com
    paths:
    - path: /
      pathType: Prefix
      backend:
        service:
          name: rental-ml-api
          port:
            number: 8000
  tls:
  - secretName: rental-ml-tls
    hosts:
    - api.rental-ml.com

# Service mesh configuration
serviceMesh:
  istio:
    enabled: true
    gateway:
      enabled: true
      hosts:
      - "api.rental-ml.com"
    virtualService:
      enabled: true
      retries:
        attempts: 3
        perTryTimeout: 30s
      timeout: 60s
    destinationRule:
      enabled: true
      trafficPolicy:
        connectionPool:
          tcp:
            maxConnections: 100
          http:
            http1MaxPendingRequests: 10
            http2MaxRequests: 100
        outlierDetection:
          consecutiveGatewayErrors: 3
          interval: 30s
          baseEjectionTime: 30s
          maxEjectionPercent: 50

# Security policies
securityPolicies:
  networkPolicies:
    enabled: true
    defaultDenyAll: true
  podSecurityPolicy:
    enabled: true
  seccompProfile:
    enabled: true
    type: RuntimeDefault

# Backup configuration
backup:
  enabled: true
  schedule: "0 1 * * *"  # Daily at 1 AM
  retention: "30d"
  storage:
    size: "100Gi"
    storageClass: "premium-ssd"

# External secrets
externalSecrets:
  enabled: true
  secretStore:
    provider: "azure"
    auth:
      secretRef:
        clientId:
          name: "azure-secret-store-creds"
          key: "client-id"
        clientSecret:
          name: "azure-secret-store-creds"
          key: "client-secret"
      environment: "AzurePublicCloud"
      tenantId: "your-tenant-id"
    vaultUrl: "https://rental-ml-production-kv.vault.azure.net/"

# Monitoring and observability
monitoring:
  enabled: true
  prometheus:
    enabled: true
    serviceMonitor:
      enabled: true
      interval: 30s
      path: /metrics
  grafana:
    enabled: true
    dashboards:
      enabled: true
  jaeger:
    enabled: true
    strategy: production
  alerting:
    enabled: true
    rules:
      cpu: 80
      memory: 85
      errorRate: 5
      responseTime: 1000

# Chaos engineering
chaosEngineering:
  enabled: false  # Enable for testing
  litmus:
    enabled: false