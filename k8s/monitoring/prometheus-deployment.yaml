---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  namespace: rental-ml
  labels:
    app.kubernetes.io/name: rental-ml-system
    app.kubernetes.io/component: monitoring
    app.kubernetes.io/instance: prometheus
    app.kubernetes.io/version: "latest"
spec:
  replicas: 1
  strategy:
    type: Recreate  # Use Recreate to avoid issues with storage
  selector:
    matchLabels:
      app.kubernetes.io/name: rental-ml-system
      app.kubernetes.io/component: monitoring
      app.kubernetes.io/instance: prometheus
  template:
    metadata:
      labels:
        app.kubernetes.io/name: rental-ml-system
        app.kubernetes.io/component: monitoring
        app.kubernetes.io/instance: prometheus
        app.kubernetes.io/version: "latest"
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/metrics"
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
        runAsGroup: 65534
        fsGroup: 65534
      serviceAccountName: rental-ml-monitoring
      containers:
      - name: prometheus
        image: prom/prometheus:latest
        imagePullPolicy: IfNotPresent
        args:
        - '--config.file=/etc/prometheus/prometheus.yml'
        - '--storage.tsdb.path=/prometheus'
        - '--web.console.libraries=/etc/prometheus/console_libraries'
        - '--web.console.templates=/etc/prometheus/consoles'
        - '--storage.tsdb.retention.time=200h'
        - '--web.enable-lifecycle'
        - '--web.route-prefix=/'
        - '--web.enable-admin-api'
        ports:
        - containerPort: 9090
          name: http
          protocol: TCP
        env:
        - name: PROMETHEUS_RETENTION
          value: "200h"
        volumeMounts:
        - name: prometheus-config
          mountPath: /etc/prometheus
          readOnly: true
        - name: prometheus-data
          mountPath: /prometheus
        - name: prometheus-rules
          mountPath: /etc/prometheus/rules
          readOnly: true
        - name: tmp
          mountPath: /tmp
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /-/healthy
            port: http
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 5
        readinessProbe:
          httpGet:
            path: /-/ready
            port: http
            scheme: HTTP
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
      volumes:
      - name: prometheus-config
        configMap:
          name: rental-ml-prometheus-config
      - name: prometheus-rules
        configMap:
          name: rental-ml-prometheus-rules
      - name: prometheus-data
        persistentVolumeClaim:
          claimName: prometheus-pvc
      - name: tmp
        emptyDir: {}
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
---
# Prometheus Rules ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: rental-ml-prometheus-rules
  namespace: rental-ml
  labels:
    app.kubernetes.io/name: rental-ml-system
    app.kubernetes.io/component: monitoring
    app.kubernetes.io/instance: prometheus-rules
data:
  rental-ml-alerts.yml: |
    groups:
    - name: rental-ml-app
      rules:
      - alert: ApplicationDown
        expr: up{job="rental-ml-app"} == 0
        for: 5m
        labels:
          severity: critical
        annotations:
          summary: "Rental ML Application is down"
          description: "The Rental ML application has been down for more than 5 minutes."
      
      - alert: HighErrorRate
        expr: rate(http_requests_total{status=~"5.."}[5m]) > 0.1
        for: 5m
        labels:
          severity: warning
        annotations:
          summary: "High error rate detected"
          description: "Error rate is {{ $value }} errors per second."
      
      - alert: HighResponseTime
        expr: histogram_quantile(0.95, rate(http_request_duration_seconds_bucket[5m])) > 1
        for: 10m
        labels:
          severity: warning
        annotations:
          summary: "High response time detected"
          description: "95th percentile response time is {{ $value }} seconds."
      
      - alert: HighMemoryUsage
        expr: (container_memory_usage_bytes / container_spec_memory_limit_bytes) > 0.8
        for: 5m
        labels:
          severity: warning
        annotations:
          summary: "High memory usage"
          description: "Container {{ $labels.container }} is using {{ $value | humanizePercentage }} of its memory limit."
      
      - alert: HighCPUUsage
        expr: rate(container_cpu_usage_seconds_total[5m]) > 0.8
        for: 5m
        labels:
          severity: warning
        annotations:
          summary: "High CPU usage"
          description: "Container {{ $labels.container }} is using {{ $value | humanizePercentage }} CPU."
    
    - name: rental-ml-database
      rules:
      - alert: PostgreSQLDown
        expr: up{job="postgres"} == 0
        for: 5m
        labels:
          severity: critical
        annotations:
          summary: "PostgreSQL is down"
          description: "PostgreSQL database has been down for more than 5 minutes."
      
      - alert: PostgreSQLConnectionsHigh
        expr: pg_stat_database_numbackends / pg_settings_max_connections > 0.8
        for: 5m
        labels:
          severity: warning
        annotations:
          summary: "PostgreSQL connections high"
          description: "PostgreSQL is using {{ $value | humanizePercentage }} of available connections."
      
      - alert: PostgreSQLSlowQueries
        expr: rate(pg_stat_database_tup_returned[5m]) / rate(pg_stat_database_tup_fetched[5m]) < 0.1
        for: 10m
        labels:
          severity: warning
        annotations:
          summary: "PostgreSQL slow queries detected"
          description: "Query efficiency is low: {{ $value | humanizePercentage }}."
    
    - name: rental-ml-redis
      rules:
      - alert: RedisDown
        expr: up{job="redis"} == 0
        for: 5m
        labels:
          severity: critical
        annotations:
          summary: "Redis is down"
          description: "Redis cache has been down for more than 5 minutes."
      
      - alert: RedisMemoryHigh
        expr: redis_memory_used_bytes / redis_memory_max_bytes > 0.8
        for: 5m
        labels:
          severity: warning
        annotations:
          summary: "Redis memory usage high"
          description: "Redis is using {{ $value | humanizePercentage }} of available memory."
      
      - alert: RedisConnectionsHigh
        expr: redis_connected_clients / redis_config_maxclients > 0.8
        for: 5m
        labels:
          severity: warning
        annotations:
          summary: "Redis connections high"
          description: "Redis is using {{ $value | humanizePercentage }} of maximum connections."
    
    - name: rental-ml-workers
      rules:
      - alert: CeleryWorkerDown
        expr: up{job="rental-ml-worker"} == 0
        for: 5m
        labels:
          severity: critical
        annotations:
          summary: "Celery worker is down"
          description: "Celery worker has been down for more than 5 minutes."
      
      - alert: CeleryQueueLengthHigh
        expr: celery_queue_length > 100
        for: 10m
        labels:
          severity: warning
        annotations:
          summary: "Celery queue length high"
          description: "Celery queue has {{ $value }} pending tasks."
      
      - alert: CeleryTaskFailureRateHigh
        expr: rate(celery_task_failed_total[5m]) / rate(celery_task_total[5m]) > 0.1
        for: 5m
        labels:
          severity: warning
        annotations:
          summary: "High Celery task failure rate"
          description: "Celery task failure rate is {{ $value | humanizePercentage }}."
    
    - name: kubernetes-resources
      rules:
      - alert: KubernetesPodCrashLooping
        expr: rate(kube_pod_container_status_restarts_total[15m]) > 0
        for: 5m
        labels:
          severity: warning
        annotations:
          summary: "Pod is crash looping"
          description: "Pod {{ $labels.namespace }}/{{ $labels.pod }} is restarting frequently."
      
      - alert: KubernetesPodNotReady
        expr: kube_pod_status_ready{condition="false"} == 1
        for: 10m
        labels:
          severity: warning
        annotations:
          summary: "Pod not ready"
          description: "Pod {{ $labels.namespace }}/{{ $labels.pod }} has been not ready for more than 10 minutes."
      
      - alert: KubernetesPersistentVolumeClaimPending
        expr: kube_persistentvolumeclaim_status_phase{phase="Pending"} == 1
        for: 5m
        labels:
          severity: warning
        annotations:
          summary: "PVC pending"
          description: "PVC {{ $labels.namespace }}/{{ $labels.persistentvolumeclaim }} is pending."
---
# ServiceMonitor for Prometheus to scrape itself
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: prometheus-self
  namespace: rental-ml
  labels:
    app.kubernetes.io/name: rental-ml-system
    app.kubernetes.io/component: monitoring
    app.kubernetes.io/instance: prometheus-self
spec:
  selector:
    matchLabels:
      app.kubernetes.io/component: monitoring
      app.kubernetes.io/instance: prometheus
  endpoints:
  - port: http
    path: /metrics
    interval: 30s
---
# ServiceMonitor for application components
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: rental-ml-app
  namespace: rental-ml
  labels:
    app.kubernetes.io/name: rental-ml-system
    app.kubernetes.io/component: monitoring
    app.kubernetes.io/instance: rental-ml-app-monitor
spec:
  selector:
    matchLabels:
      app.kubernetes.io/component: app
  endpoints:
  - port: http
    path: /metrics
    interval: 30s
---
# ServiceMonitor for worker components
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: rental-ml-worker
  namespace: rental-ml
  labels:
    app.kubernetes.io/name: rental-ml-system
    app.kubernetes.io/component: monitoring
    app.kubernetes.io/instance: rental-ml-worker-monitor
spec:
  selector:
    matchLabels:
      app.kubernetes.io/component: worker
  endpoints:
  - port: celery-metrics
    path: /metrics
    interval: 30s