# Production Grafana configuration
replicas: 2

# Admin configuration
admin:
  existingSecret: "grafana-admin-secret"
  userKey: "admin-user"
  passwordKey: "admin-password"

# High availability configuration
affinity:
  podAntiAffinity:
    requiredDuringSchedulingIgnoredDuringExecution:
    - labelSelector:
        matchExpressions:
        - key: app.kubernetes.io/name
          operator: In
          values:
          - grafana
      topologyKey: kubernetes.io/hostname

# Resource requirements
resources:
  requests:
    memory: "1Gi"
    cpu: "500m"
  limits:
    memory: "2Gi"
    cpu: "1000m"

# Persistence
persistence:
  enabled: true
  type: pvc
  storageClassName: "premium-ssd"
  size: 20Gi
  accessModes:
  - ReadWriteOnce

# Security context
securityContext:
  runAsNonRoot: true
  runAsUser: 472
  fsGroup: 472

# Pod disruption budget
podDisruptionBudget:
  enabled: true
  minAvailable: 1

# Service configuration
service:
  enabled: true
  type: ClusterIP
  port: 80
  targetPort: 3000
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "3000"
    prometheus.io/path: "/metrics"

# Ingress
ingress:
  enabled: true
  ingressClassName: "istio"
  annotations:
    kubernetes.io/ingress.class: "istio"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
  hosts:
  - monitoring.rental-ml.com
  path: /grafana
  tls:
  - secretName: grafana-tls
    hosts:
    - monitoring.rental-ml.com

# Grafana configuration
grafana.ini:
  server:
    protocol: http
    http_port: 3000
    domain: monitoring.rental-ml.com
    root_url: "https://monitoring.rental-ml.com/grafana"
    serve_from_sub_path: true
    enable_gzip: true
  
  security:
    admin_user: admin
    admin_password: $__file{/etc/secrets/admin-password}
    secret_key: $__file{/etc/secrets/secret-key}
    disable_gravatar: true
    cookie_secure: true
    cookie_samesite: strict
    content_security_policy: true
    strict_transport_security: true
    x_content_type_options: true
    x_xss_protection: true
  
  users:
    allow_sign_up: false
    allow_org_create: false
    auto_assign_org: true
    auto_assign_org_id: 1
    auto_assign_org_role: Viewer
    verify_email_enabled: false
    default_theme: dark
  
  auth:
    disable_login_form: false
    disable_signout_menu: false
    signout_redirect_url: ""
    oauth_auto_login: false
  
  auth.anonymous:
    enabled: false
  
  auth.github:
    enabled: true
    allow_sign_up: true
    client_id: $__file{/etc/secrets/github-client-id}
    client_secret: $__file{/etc/secrets/github-client-secret}
    scopes: user:email,read:org
    auth_url: https://github.com/login/oauth/authorize
    token_url: https://github.com/login/oauth/access_token
    api_url: https://api.github.com/user
    team_ids: ""
    allowed_organizations: "rental-ml-org"
    role_attribute_path: contains(groups[*], '@rental-ml-org/devops') && 'Admin' || contains(groups[*], '@rental-ml-org/developers') && 'Editor' || 'Viewer'
  
  smtp:
    enabled: true
    host: smtp.gmail.com:587
    user: alerts@rental-ml.com
    password: $__file{/etc/secrets/smtp-password}
    cert_file: ""
    key_file: ""
    skip_verify: false
    from_address: alerts@rental-ml.com
    from_name: Grafana Alerts
    ehlo_identity: rental-ml.com
    startTLS_policy: MandatoryStartTLS
  
  alerting:
    enabled: true
    execute_alerts: true
    error_or_timeout: alerting
    nodata_or_nullvalues: no_data
    concurrent_render_limit: 5
    evaluation_timeout_seconds: 30
    notification_timeout_seconds: 30
    max_attempts: 3
  
  unified_alerting:
    enabled: true
    disabled_orgs: ""
    admin_config_poll_interval: 60s
    alertmanager_config_poll_interval: 60s
    ha_listen_address: "${POD_IP}:9094"
    ha_advertise_address: ""
    ha_peers: ""
    ha_peer_timeout: 15s
    ha_gossip_interval: 200ms
    ha_push_pull_interval: 60s
    ha_redis_address: ""
  
  log:
    mode: console
    level: info
    filters: rendering:debug
  
  metrics:
    enabled: true
    interval_seconds: 10
    disable_total_stats: false
  
  tracing.jaeger:
    address: jaeger-agent.monitoring.svc.cluster.local:6831
    always_included_tag: ""
    sampler_type: const
    sampler_param: 1
  
  feature_toggles:
    enable: ngalert

# Data sources configuration
datasources:
  datasources.yaml:
    apiVersion: 1
    datasources:
    - name: Prometheus
      type: prometheus
      url: http://prometheus-server.monitoring.svc.cluster.local:80
      access: proxy
      isDefault: true
      editable: true
      jsonData:
        timeInterval: "30s"
        queryTimeout: "300s"
        httpMethod: "POST"
        manageAlerts: true
        prometheusType: Prometheus
        prometheusVersion: 2.40.0
        cacheLevel: 'High'
        incrementalQuerying: true
        incrementalQueryOverlapWindow: 10m
    
    - name: Loki
      type: loki
      url: http://loki-gateway.monitoring.svc.cluster.local:80
      access: proxy
      editable: true
      jsonData:
        maxLines: 1000
        derivedFields:
        - datasourceUid: "jaeger"
          matcherRegex: "traceID=(\\w+)"
          name: "TraceID"
          url: "$${__value.raw}"
    
    - name: Jaeger
      type: jaeger
      url: http://jaeger-query.monitoring.svc.cluster.local:16686
      access: proxy
      editable: true
      uid: "jaeger"
      jsonData:
        tracesToLogs:
          datasourceUid: 'loki'
          tags: ['job', 'instance', 'pod', 'namespace']
          mappedTags: [{ key: 'service.name', value: 'service' }]
          mapTagNamesEnabled: false
          spanStartTimeShift: '1h'
          spanEndTimeShift: '1h'
          filterByTraceID: false
          filterBySpanID: false
    
    - name: PostgreSQL
      type: postgres
      url: postgres.rental-ml-production.svc.cluster.local:5432
      database: rental_ml
      user: grafana_readonly
      secureJsonData:
        password: $__file{/etc/secrets/postgres-grafana-password}
      jsonData:
        sslmode: require
        maxOpenConns: 0
        maxIdleConns: 2
        connMaxLifetime: 14400
        postgresVersion: 1500
        timescaledb: false

# Dashboard providers
dashboardProviders:
  dashboardproviders.yaml:
    apiVersion: 1
    providers:
    - name: 'default'
      orgId: 1
      folder: ''
      type: file
      disableDeletion: false
      editable: true
      options:
        path: /var/lib/grafana/dashboards/default
    - name: 'kubernetes'
      orgId: 1
      folder: 'Kubernetes'
      type: file
      disableDeletion: false
      editable: true
      options:
        path: /var/lib/grafana/dashboards/kubernetes
    - name: 'application'
      orgId: 1
      folder: 'Application'
      type: file
      disableDeletion: false
      editable: true
      options:
        path: /var/lib/grafana/dashboards/application
    - name: 'istio'
      orgId: 1
      folder: 'Service Mesh'
      type: file
      disableDeletion: false
      editable: true
      options:
        path: /var/lib/grafana/dashboards/istio

# Dashboards - will be loaded from configmaps
dashboards:
  default:
    prometheus-stats:
      gnetId: 2
      revision: 2
      datasource: Prometheus
    
    node-exporter:
      gnetId: 1860
      revision: 27
      datasource: Prometheus
    
    kubernetes-cluster-monitoring:
      gnetId: 7249
      revision: 1
      datasource: Prometheus
  
  kubernetes:
    kubernetes-capacity-planning:
      gnetId: 5228
      revision: 1
      datasource: Prometheus
    
    kubernetes-resource-requests:
      gnetId: 7187
      revision: 1
      datasource: Prometheus
    
    kubernetes-networking:
      gnetId: 12486
      revision: 1
      datasource: Prometheus
  
  application:
    rental-ml-overview:
      url: https://raw.githubusercontent.com/rental-ml/dashboards/main/rental-ml-overview.json
    
    rental-ml-api-performance:
      url: https://raw.githubusercontent.com/rental-ml/dashboards/main/api-performance.json
    
    rental-ml-ml-pipeline:
      url: https://raw.githubusercontent.com/rental-ml/dashboards/main/ml-pipeline.json
  
  istio:
    istio-mesh:
      gnetId: 7639
      revision: 22
      datasource: Prometheus
    
    istio-service:
      gnetId: 7636
      revision: 22
      datasource: Prometheus
    
    istio-workload:
      gnetId: 7630
      revision: 22
      datasource: Prometheus

# Sidecar configuration for automatic dashboard discovery
sidecar:
  dashboards:
    enabled: true
    label: grafana_dashboard
    labelValue: "1"
    searchNamespace: ALL
    provider:
      foldersFromFilesStructure: true
  
  datasources:
    enabled: true
    label: grafana_datasource
    labelValue: "1"
    searchNamespace: ALL
  
  notifiers:
    enabled: true
    label: grafana_notifier
    labelValue: "1"
    searchNamespace: ALL

# Image configuration
image:
  repository: grafana/grafana
  tag: "10.2.0"
  pullPolicy: IfNotPresent

# Service account
serviceAccount:
  create: true
  autoMount: true
  annotations: {}

# RBAC
rbac:
  create: true
  pspEnabled: false
  pspUseAppArmor: false
  namespaced: false

# Network policy
networkPolicy:
  enabled: true
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: istio-system
    ports:
    - protocol: TCP
      port: 3000
  - from:
    - namespaceSelector:
        matchLabels:
          name: monitoring
    ports:
    - protocol: TCP
      port: 3000
  egress:
  - to:
    - namespaceSelector:
        matchLabels:
          name: monitoring
    ports:
    - protocol: TCP
      port: 9090
    - protocol: TCP
      port: 3100
    - protocol: TCP
      port: 16686
  - to:
    - namespaceSelector:
        matchLabels:
          name: rental-ml-production
    ports:
    - protocol: TCP
      port: 5432
  - to: []
    ports:
    - protocol: TCP
      port: 443
    - protocol: TCP
      port: 587

# Environment variables
env:
  GF_EXPLORE_ENABLED: true
  GF_DISABLE_SANITIZE_HTML: false
  GF_LOG_FILTERS: rendering:debug
  GF_RENDERING_SERVER_URL: http://grafana-image-renderer.monitoring.svc.cluster.local:8081/render
  GF_RENDERING_CALLBACK_URL: http://grafana.monitoring.svc.cluster.local:80/
  GF_PLUGINS_ALLOW_LOADING_UNSIGNED_PLUGINS: ""

# Volume mounts for secrets
extraSecretMounts:
- name: auth-secrets
  secretName: grafana-auth-secrets
  defaultMode: 0440
  mountPath: /etc/secrets
  readOnly: true

# Plugins to install
plugins:
  - grafana-clock-panel
  - grafana-simple-json-datasource
  - grafana-worldmap-panel
  - grafana-piechart-panel
  - redis-datasource
  - postgres-datasource
  - camptocamp-prometheus-alertmanager-datasource
  - grafana-kubernetes-app