[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "rental-ml-system"
version = "0.1.0"
description = "Machine Learning System for Rental Property Search and Recommendation"
readme = "README.md"
requires-python = ">=3.9,<3.12"
license = {text = "MIT"}
authors = [
    {name = "ML Engineering Team", email = "ml-team@rental-system.com"},
]
maintainers = [
    {name = "ML Engineering Team", email = "ml-team@rental-system.com"},
]
keywords = ["machine-learning", "rental", "recommendation", "search", "real-estate"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

dependencies = [
    "tensorflow>=2.13.0,<2.15.0",
    "transformers>=4.30.0,<4.40.0",
    "numpy>=1.24.0,<1.26.0",
    "pandas>=2.0.0,<2.2.0",
    "scikit-learn>=1.3.0,<1.4.0",
    "asyncio>=3.4.3,<3.5.0",
    "aiohttp>=3.8.0,<3.10.0",
    "pydantic>=2.0.0,<2.6.0",
    "sqlalchemy>=2.0.0,<2.1.0",
    "redis>=4.5.0,<5.1.0",
    "beautifulsoup4>=4.12.0,<4.13.0",
    "fastapi>=0.100.0,<0.112.0",
    "uvicorn>=0.22.0,<0.31.0",
    "streamlit>=1.24.0,<1.37.0",
    "python-multipart>=0.0.6,<0.0.7",
    "pytest>=7.4.0,<7.5.0",
    "python-dotenv>=1.0.0,<1.1.0",
    "loguru>=0.7.0,<0.8.0",
]

[project.optional-dependencies]
dev = [
    "pytest-asyncio>=0.21.0,<0.24.0",
    "pytest-cov>=4.1.0,<4.2.0",
    "black>=23.7.0,<23.12.0",
    "flake8>=6.0.0,<6.2.0",
    "isort>=5.12.0,<5.14.0",
    "mypy>=1.4.0,<1.9.0",
    "jupyter>=1.0.0,<1.1.0",
    "matplotlib>=3.7.0,<3.9.0",
    "seaborn>=0.12.0,<0.14.0",
    "pre-commit>=3.3.0,<3.8.0",
]
prod = [
    "gunicorn>=21.2.0,<21.3.0",
    "prometheus-client>=0.17.0,<0.21.0",
    "sentry-sdk>=1.28.0,<1.46.0",
    "structlog>=23.1.0,<23.3.0",
    "celery>=5.3.0,<5.4.0",
]

[project.urls]
Homepage = "https://github.com/rental-ml-system/rental-ml-system"
Documentation = "https://rental-ml-system.readthedocs.io"
Repository = "https://github.com/rental-ml-system/rental-ml-system"
Issues = "https://github.com/rental-ml-system/rental-ml-system/issues"
Changelog = "https://github.com/rental-ml-system/rental-ml-system/blob/main/CHANGELOG.md"

[project.scripts]
rental-ml-server = "rental_ml_system.presentation.web.main:main"
rental-ml-demo = "rental_ml_system.presentation.demo.main:main"
rental-ml-train = "rental_ml_system.infrastructure.ml.training.main:main"

[tool.setuptools.packages.find]
where = ["src"]
include = ["rental_ml_system*"]

[tool.setuptools.package-dir]
"" = "src"

[tool.black]
line-length = 88
target-version = ['py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
src_paths = ["src", "tests"]

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "tensorflow.*",
    "transformers.*",
    "streamlit.*",
    "redis.*",
    "prometheus_client.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "ml: marks tests as machine learning tests",
    "api: marks tests as API tests",
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__init__.py",
    "*/migrations/*",
    "*/venv/*",
    "*/.venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.flake8]
max-line-length = 88
extend-ignore = ["E203", "E501", "W503"]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    ".eggs",
    "*.egg-info",
    ".venv",
    ".env",
    "venv",
    "env",
]

[tool.bandit]
exclude_dirs = ["tests", "venv", ".venv"]
skips = ["B101", "B601"]