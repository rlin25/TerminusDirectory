[tool:pytest]
# Pytest configuration for rental ML system test suite

# Test discovery
testpaths = tests
python_files = test_*.py *_test.py
python_classes = Test*
python_functions = test_*

# Test execution options
addopts = 
    --strict-markers
    --strict-config
    --verbose
    --tb=short
    --cov=src
    --cov-report=term-missing
    --cov-report=html:htmlcov
    --cov-report=xml:coverage.xml
    --cov-fail-under=85
    --durations=10
    --maxfail=5
    -ra

# Test markers
markers =
    unit: Unit tests - fast, isolated tests
    integration: Integration tests - slower tests with external dependencies
    performance: Performance and load tests
    ml: Machine learning specific tests
    api: API endpoint tests
    db: Database related tests
    slow: Slow running tests (skip with -m "not slow")
    redis: Redis cache tests
    scraping: Web scraping tests
    model_training: ML model training tests
    model_inference: ML model inference tests
    e2e: End-to-end tests
    smoke: Smoke tests for basic functionality
    regression: Regression tests to prevent bugs
    security: Security related tests

# Filtering and warnings
filterwarnings =
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    ignore::UserWarning:tensorflow.*
    ignore::FutureWarning:sklearn.*
    ignore::RuntimeWarning:numpy.*

# Minimum version
minversion = 7.0

# Timeout settings (in seconds)
timeout = 300
timeout_method = thread

# Coverage configuration
[coverage:run]
source = src
omit = 
    */tests/*
    */test_*
    */__init__.py
    */migrations/*
    */venv/*
    */.venv/*
    */build/*
    */dist/*
    setup.py

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    if self.debug:
    if settings.DEBUG
    raise AssertionError
    raise NotImplementedError
    if 0:
    if __name__ == .__main__.:
    class .*\bProtocol\):
    @(abc\.)?abstractmethod
    # Type checking imports
    if TYPE_CHECKING:

# HTML coverage report
[coverage:html]
directory = htmlcov
title = Rental ML System Coverage Report

# XML coverage report
[coverage:xml]
output = coverage.xml